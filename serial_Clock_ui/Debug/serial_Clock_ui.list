
serial_Clock_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008770  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008990  08008990  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008990  08008990  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008990  08008990  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c8  200001e8  08008b80  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b0  08008b80  000214b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016785  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003289  00000000  00000000  00036996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00039c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  0003acc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a94a  00000000  00000000  0003bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001160e  00000000  00000000  00056522  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d2f0  00000000  00000000  00067b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4e20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  000f4e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008864 	.word	0x08008864

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	08008864 	.word	0x08008864

0800014c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay+0x14>
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000498 	.word	0x20000498

0800017c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	2120      	movs	r1, #32
 8000190:	4820      	ldr	r0, [pc, #128]	; (8000214 <send_to_lcd+0x98>)
 8000192:	f001 f9fd 	bl	8001590 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	08db      	lsrs	r3, r3, #3
 800019a:	b2db      	uxtb	r3, r3
 800019c:	f003 0301 	and.w	r3, r3, #1
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2180      	movs	r1, #128	; 0x80
 80001a6:	481c      	ldr	r0, [pc, #112]	; (8000218 <send_to_lcd+0x9c>)
 80001a8:	f001 f9f2 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	461a      	mov	r2, r3
 80001ba:	2140      	movs	r1, #64	; 0x40
 80001bc:	4816      	ldr	r0, [pc, #88]	; (8000218 <send_to_lcd+0x9c>)
 80001be:	f001 f9e7 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	085b      	lsrs	r3, r3, #1
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	f003 0301 	and.w	r3, r3, #1
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	461a      	mov	r2, r3
 80001d0:	2120      	movs	r1, #32
 80001d2:	4811      	ldr	r0, [pc, #68]	; (8000218 <send_to_lcd+0x9c>)
 80001d4:	f001 f9dc 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	2110      	movs	r1, #16
 80001e4:	480c      	ldr	r0, [pc, #48]	; (8000218 <send_to_lcd+0x9c>)
 80001e6:	f001 f9d3 	bl	8001590 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2180      	movs	r1, #128	; 0x80
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <send_to_lcd+0x98>)
 80001f0:	f001 f9ce 	bl	8001590 <HAL_GPIO_WritePin>
	delay (50);
 80001f4:	2032      	movs	r0, #50	; 0x32
 80001f6:	f7ff ffa9 	bl	800014c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2180      	movs	r1, #128	; 0x80
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <send_to_lcd+0x98>)
 8000200:	f001 f9c6 	bl	8001590 <HAL_GPIO_WritePin>
	delay (50);
 8000204:	2032      	movs	r0, #50	; 0x32
 8000206:	f7ff ffa1 	bl	800014c <delay>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010c00 	.word	0x40010c00
 8000218:	40010800 	.word	0x40010800

0800021c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	091b      	lsrs	r3, r3, #4
 800022a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffa3 	bl	800017c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 030f 	and.w	r3, r3, #15
 800023c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ff9a 	bl	800017c <send_to_lcd>
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	091b      	lsrs	r3, r3, #4
 800025e:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	2101      	movs	r1, #1
 8000264:	4618      	mov	r0, r3
 8000266:	f7ff ff89 	bl	800017c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 030f 	and.w	r3, r3, #15
 8000270:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	2101      	movs	r1, #1
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff80 	bl	800017c <send_to_lcd>
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <lcd_clear>:

void lcd_clear (void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000288:	2001      	movs	r0, #1
 800028a:	f7ff ffc7 	bl	800021c <lcd_send_cmd>
	HAL_Delay(2);
 800028e:	2002      	movs	r0, #2
 8000290:	f000 fef4 	bl	800107c <HAL_Delay>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
    switch (row)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <lcd_put_cur+0x16>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d005      	beq.n	80002b8 <lcd_put_cur+0x20>
 80002ac:	e009      	b.n	80002c2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b4:	603b      	str	r3, [r7, #0]
            break;
 80002b6:	e004      	b.n	80002c2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002be:	603b      	str	r3, [r7, #0]
            break;
 80002c0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ffa8 	bl	800021c <lcd_send_cmd>
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <lcd_init>:


void lcd_init (void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002d8:	2032      	movs	r0, #50	; 0x32
 80002da:	f000 fecf 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002de:	2030      	movs	r0, #48	; 0x30
 80002e0:	f7ff ff9c 	bl	800021c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002e4:	2005      	movs	r0, #5
 80002e6:	f000 fec9 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002ea:	2030      	movs	r0, #48	; 0x30
 80002ec:	f7ff ff96 	bl	800021c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fec3 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002f6:	2030      	movs	r0, #48	; 0x30
 80002f8:	f7ff ff90 	bl	800021c <lcd_send_cmd>
	HAL_Delay(10);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f000 febd 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000302:	2020      	movs	r0, #32
 8000304:	f7ff ff8a 	bl	800021c <lcd_send_cmd>
	HAL_Delay(10);
 8000308:	200a      	movs	r0, #10
 800030a:	f000 feb7 	bl	800107c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800030e:	2028      	movs	r0, #40	; 0x28
 8000310:	f7ff ff84 	bl	800021c <lcd_send_cmd>
	HAL_Delay(1);
 8000314:	2001      	movs	r0, #1
 8000316:	f000 feb1 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800031a:	2008      	movs	r0, #8
 800031c:	f7ff ff7e 	bl	800021c <lcd_send_cmd>
	HAL_Delay(1);
 8000320:	2001      	movs	r0, #1
 8000322:	f000 feab 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000326:	2001      	movs	r0, #1
 8000328:	f7ff ff78 	bl	800021c <lcd_send_cmd>
	HAL_Delay(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f000 fea5 	bl	800107c <HAL_Delay>
	HAL_Delay(1);
 8000332:	2001      	movs	r0, #1
 8000334:	f000 fea2 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000338:	2006      	movs	r0, #6
 800033a:	f7ff ff6f 	bl	800021c <lcd_send_cmd>
	HAL_Delay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fe9c 	bl	800107c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000344:	200c      	movs	r0, #12
 8000346:	f7ff ff69 	bl	800021c <lcd_send_cmd>
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}

0800034e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000356:	e006      	b.n	8000366 <lcd_send_string+0x18>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff75 	bl	8000250 <lcd_send_data>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f4      	bne.n	8000358 <lcd_send_string+0xa>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <runMode>:
void buzzer(uint8_t f);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void runMode(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af02      	add	r7, sp, #8
	char time[8];
	lcd_put_cur(0, 5);
 800037e:	2105      	movs	r1, #5
 8000380:	2000      	movs	r0, #0
 8000382:	f7ff ff89 	bl	8000298 <lcd_put_cur>
	lcd_send_string("RUN MODE");
 8000386:	4815      	ldr	r0, [pc, #84]	; (80003dc <runMode+0x64>)
 8000388:	f7ff ffe1 	bl	800034e <lcd_send_string>
	do{
		sprintf(time,"%02d:%02d:%02d",counterH,counterM,counterS);
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <runMode+0x68>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b29b      	uxth	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <runMode+0x6c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4619      	mov	r1, r3
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <runMode+0x70>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	4638      	mov	r0, r7
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	460b      	mov	r3, r1
 80003a8:	4910      	ldr	r1, [pc, #64]	; (80003ec <runMode+0x74>)
 80003aa:	f007 fe49 	bl	8008040 <siprintf>
		CDC_Transmit_FS(time,8);
 80003ae:	463b      	mov	r3, r7
 80003b0:	2108      	movs	r1, #8
 80003b2:	4618      	mov	r0, r3
 80003b4:	f007 fa34 	bl	8007820 <CDC_Transmit_FS>
		HAL_Delay(250);
 80003b8:	20fa      	movs	r0, #250	; 0xfa
 80003ba:	f000 fe5f 	bl	800107c <HAL_Delay>
	}while(reference != 254 );
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <runMode+0x78>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2bfe      	cmp	r3, #254	; 0xfe
 80003c6:	d1e1      	bne.n	800038c <runMode+0x14>
	lcd_clear();
 80003c8:	f7ff ff5c 	bl	8000284 <lcd_clear>
	buzzer(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f000 fc9b 	bl	8000d08 <buzzer>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	0800887c 	.word	0x0800887c
 80003e0:	20000002 	.word	0x20000002
 80003e4:	20000000 	.word	0x20000000
 80003e8:	20000208 	.word	0x20000208
 80003ec:	08008888 	.word	0x08008888
 80003f0:	20000004 	.word	0x20000004

080003f4 <setAlarma>:
void setAlarma(void){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <setTime>:
void alarm(uint8_t f){

}
void setTime(void){
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af02      	add	r7, sp, #8
	uint8_t hour,minute;
	uint8_t buffer = 0, buffer1 = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	717b      	strb	r3, [r7, #5]
 800040a:	2300      	movs	r3, #0
 800040c:	713b      	strb	r3, [r7, #4]
	uint8_t enter = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	70fb      	strb	r3, [r7, #3]
	buffer = reference;
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <setTime+0xcc>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	717b      	strb	r3, [r7, #5]
	while(buffer == 3){
 8000418:	e047      	b.n	80004aa <setTime+0xaa>
		if (reference == 0)
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <setTime+0xcc>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d101      	bne.n	8000428 <setTime+0x28>
			enter = 1;
 8000424:	2301      	movs	r3, #1
 8000426:	70fb      	strb	r3, [r7, #3]
		if (enter == 0){
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d118      	bne.n	8000460 <setTime+0x60>
			hour = reference;
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <setTime+0xcc>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
			sprintf(hrs,"%d:%d:%d",hour,counterM,counterS);
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <setTime+0xd0>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4619      	mov	r1, r3
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <setTime+0xd4>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	b29b      	uxth	r3, r3
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	460b      	mov	r3, r1
 8000448:	4923      	ldr	r1, [pc, #140]	; (80004d8 <setTime+0xd8>)
 800044a:	4824      	ldr	r0, [pc, #144]	; (80004dc <setTime+0xdc>)
 800044c:	f007 fdf8 	bl	8008040 <siprintf>
			lcd_put_cur(1, 3);
 8000450:	2103      	movs	r1, #3
 8000452:	2001      	movs	r0, #1
 8000454:	f7ff ff20 	bl	8000298 <lcd_put_cur>
			lcd_send_string(hrs);
 8000458:	4820      	ldr	r0, [pc, #128]	; (80004dc <setTime+0xdc>)
 800045a:	f7ff ff78 	bl	800034e <lcd_send_string>
 800045e:	e01c      	b.n	800049a <setTime+0x9a>
		}else if (enter == 1){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d119      	bne.n	800049a <setTime+0x9a>
			if(buffer1 == 0){
 8000466:	793b      	ldrb	r3, [r7, #4]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d101      	bne.n	8000470 <setTime+0x70>
				//CDC_Transmit_FS(chr4,strlen(chr4));
				buffer1 = 1;
 800046c:	2301      	movs	r3, #1
 800046e:	713b      	strb	r3, [r7, #4]
			}
			minute = reference;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <setTime+0xcc>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	71bb      	strb	r3, [r7, #6]
			sprintf(hrs,"%d:%d:%d",hour,minute,counterS);
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	79b9      	ldrb	r1, [r7, #6]
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <setTime+0xd4>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	b29b      	uxth	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	460b      	mov	r3, r1
 8000484:	4914      	ldr	r1, [pc, #80]	; (80004d8 <setTime+0xd8>)
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <setTime+0xdc>)
 8000488:	f007 fdda 	bl	8008040 <siprintf>
			lcd_put_cur(1, 3);
 800048c:	2103      	movs	r1, #3
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff ff02 	bl	8000298 <lcd_put_cur>
			lcd_send_string(hrs);
 8000494:	4811      	ldr	r0, [pc, #68]	; (80004dc <setTime+0xdc>)
 8000496:	f7ff ff5a 	bl	800034e <lcd_send_string>
		}
		if(reference == 254)
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <setTime+0xcc>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2bfe      	cmp	r3, #254	; 0xfe
 80004a2:	d102      	bne.n	80004aa <setTime+0xaa>
			buffer++;
 80004a4:	797b      	ldrb	r3, [r7, #5]
 80004a6:	3301      	adds	r3, #1
 80004a8:	717b      	strb	r3, [r7, #5]
	while(buffer == 3){
 80004aa:	797b      	ldrb	r3, [r7, #5]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d0b4      	beq.n	800041a <setTime+0x1a>
	}
	counterH = hour;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <setTime+0xe0>)
 80004b6:	801a      	strh	r2, [r3, #0]
	counterM = minute;
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <setTime+0xd0>)
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	7013      	strb	r3, [r2, #0]
	lcd_clear();
 80004be:	f7ff fee1 	bl	8000284 <lcd_clear>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000004 	.word	0x20000004
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000208 	.word	0x20000208
 80004d8:	08008898 	.word	0x08008898
 80004dc:	20000448 	.word	0x20000448
 80004e0:	20000002 	.word	0x20000002

080004e4 <chronometer>:
void chronometer (void){
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af02      	add	r7, sp, #8
	char time[11];
	uint8_t buffer = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	73fb      	strb	r3, [r7, #15]
	lcd_put_cur(0, 0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff fed1 	bl	8000298 <lcd_put_cur>
	lcd_send_string("Chronometer");
 80004f6:	482f      	ldr	r0, [pc, #188]	; (80005b4 <chronometer+0xd0>)
 80004f8:	f7ff ff29 	bl	800034e <lcd_send_string>
	buffer = reference;
 80004fc:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <chronometer+0xd4>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	73fb      	strb	r3, [r7, #15]
	while(buffer == 4){
 8000502:	e04e      	b.n	80005a2 <chronometer+0xbe>
		switch(reference){
 8000504:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <chronometer+0xd4>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b65      	cmp	r3, #101	; 0x65
 800050c:	d01e      	beq.n	800054c <chronometer+0x68>
 800050e:	2bfe      	cmp	r3, #254	; 0xfe
 8000510:	d043      	beq.n	800059a <chronometer+0xb6>
 8000512:	2b64      	cmp	r3, #100	; 0x64
 8000514:	d144      	bne.n	80005a0 <chronometer+0xbc>
		case 100:
			if(fl == 0){
 8000516:	4b29      	ldr	r3, [pc, #164]	; (80005bc <chronometer+0xd8>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d141      	bne.n	80005a2 <chronometer+0xbe>
				lcd_put_cur(0,11);
 800051e:	210b      	movs	r1, #11
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff feb9 	bl	8000298 <lcd_put_cur>
				lcd_send_string("start");
 8000526:	4826      	ldr	r0, [pc, #152]	; (80005c0 <chronometer+0xdc>)
 8000528:	f7ff ff11 	bl	800034e <lcd_send_string>
				milis = 0;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <chronometer+0xe0>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
				bufferS = 0;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <chronometer+0xe4>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
				bufferM = 0;
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <chronometer+0xe8>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
				bufferH = 0;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <chronometer+0xec>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
				fl = 1;
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <chronometer+0xd8>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
			}
			break;
 800054a:	e02a      	b.n	80005a2 <chronometer+0xbe>
		case 101:
			lcd_put_cur(0,10);
 800054c:	210a      	movs	r1, #10
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fea2 	bl	8000298 <lcd_put_cur>
			lcd_send_string("stop!");
 8000554:	481f      	ldr	r0, [pc, #124]	; (80005d4 <chronometer+0xf0>)
 8000556:	f7ff fefa 	bl	800034e <lcd_send_string>
			sprintf(time,"%02d:%02d:%02d:%02d",bufferH,bufferM,bufferS,milis);
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <chronometer+0xec>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <chronometer+0xe8>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461c      	mov	r4, r3
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <chronometer+0xe4>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <chronometer+0xe0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	1d38      	adds	r0, r7, #4
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	4623      	mov	r3, r4
 8000580:	460a      	mov	r2, r1
 8000582:	4915      	ldr	r1, [pc, #84]	; (80005d8 <chronometer+0xf4>)
 8000584:	f007 fd5c 	bl	8008040 <siprintf>
			CDC_Transmit_FS(time,11);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	210b      	movs	r1, #11
 800058c:	4618      	mov	r0, r3
 800058e:	f007 f947 	bl	8007820 <CDC_Transmit_FS>
			fl = 0;
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <chronometer+0xd8>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
			break;
 8000598:	e003      	b.n	80005a2 <chronometer+0xbe>
		case 254:
			buffer++;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
		default:
			break;
 80005a0:	bf00      	nop
	while(buffer == 4){
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d0ad      	beq.n	8000504 <chronometer+0x20>
		}
	}
	lcd_clear();
 80005a8:	f7ff fe6c 	bl	8000284 <lcd_clear>
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	080088a4 	.word	0x080088a4
 80005b8:	20000004 	.word	0x20000004
 80005bc:	20000217 	.word	0x20000217
 80005c0:	080088b0 	.word	0x080088b0
 80005c4:	20000207 	.word	0x20000207
 80005c8:	20000204 	.word	0x20000204
 80005cc:	20000205 	.word	0x20000205
 80005d0:	20000206 	.word	0x20000206
 80005d4:	080088b8 	.word	0x080088b8
 80005d8:	080088c0 	.word	0x080088c0

080005dc <temporizador>:
void temporizador (void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fce3 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f915 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fa59 	bl	8000aac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005fa:	f007 f84f 	bl	800769c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80005fe:	f000 f969 	bl	80008d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000602:	f000 f9b7 	bl	8000974 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000606:	f000 fa03 	bl	8000a10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800060a:	4878      	ldr	r0, [pc, #480]	; (80007ec <main+0x204>)
 800060c:	f003 f84c 	bl	80036a8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000610:	4877      	ldr	r0, [pc, #476]	; (80007f0 <main+0x208>)
 8000612:	f003 f893 	bl	800373c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000616:	4877      	ldr	r0, [pc, #476]	; (80007f4 <main+0x20c>)
 8000618:	f003 f890 	bl	800373c <HAL_TIM_Base_Start_IT>
  lcd_init ();
 800061c:	f7ff fe5a 	bl	80002d4 <lcd_init>
  lcd_put_cur(0, 1);
 8000620:	2101      	movs	r1, #1
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff fe38 	bl	8000298 <lcd_put_cur>
  lcd_send_string("Hello partner!");
 8000628:	4873      	ldr	r0, [pc, #460]	; (80007f8 <main+0x210>)
 800062a:	f7ff fe90 	bl	800034e <lcd_send_string>
  HAL_Delay(2000);
 800062e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000632:	f000 fd23 	bl	800107c <HAL_Delay>
  lcd_clear();
 8000636:	f7ff fe25 	bl	8000284 <lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(hrs,"%02d:%02d:%02d",counterH,counterM,counterS);
 800063a:	4b70      	ldr	r3, [pc, #448]	; (80007fc <main+0x214>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	4b6f      	ldr	r3, [pc, #444]	; (8000800 <main+0x218>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	4b6e      	ldr	r3, [pc, #440]	; (8000804 <main+0x21c>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b29b      	uxth	r3, r3
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	496c      	ldr	r1, [pc, #432]	; (8000808 <main+0x220>)
 8000656:	486d      	ldr	r0, [pc, #436]	; (800080c <main+0x224>)
 8000658:	f007 fcf2 	bl	8008040 <siprintf>
	  lcd_put_cur(1, 4);
 800065c:	2104      	movs	r1, #4
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff fe1a 	bl	8000298 <lcd_put_cur>
	  lcd_send_string(hrs);
 8000664:	4869      	ldr	r0, [pc, #420]	; (800080c <main+0x224>)
 8000666:	f7ff fe72 	bl	800034e <lcd_send_string>
	  switch(reference){
 800066a:	4b69      	ldr	r3, [pc, #420]	; (8000810 <main+0x228>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3b01      	subs	r3, #1
 8000672:	2b04      	cmp	r3, #4
 8000674:	d82a      	bhi.n	80006cc <main+0xe4>
 8000676:	a201      	add	r2, pc, #4	; (adr r2, 800067c <main+0x94>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000691 	.word	0x08000691
 8000680:	0800069d 	.word	0x0800069d
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080006b5 	.word	0x080006b5
 800068c:	080006c1 	.word	0x080006c1
	  case 1:
		  buzzer(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fb39 	bl	8000d08 <buzzer>
		  runMode();
 8000696:	f7ff fe6f 	bl	8000378 <runMode>
		  break;
 800069a:	e018      	b.n	80006ce <main+0xe6>
	  case 2:
		  buzzer(2);
 800069c:	2002      	movs	r0, #2
 800069e:	f000 fb33 	bl	8000d08 <buzzer>
		  setAlarma();
 80006a2:	f7ff fea7 	bl	80003f4 <setAlarma>
	  	  break;
 80006a6:	e012      	b.n	80006ce <main+0xe6>
	  case 3:
		  buzzer(3);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 fb2d 	bl	8000d08 <buzzer>
		  setTime();
 80006ae:	f7ff fea7 	bl	8000400 <setTime>
	 	  break;
 80006b2:	e00c      	b.n	80006ce <main+0xe6>
	  case 4:
		  buzzer(4);
 80006b4:	2004      	movs	r0, #4
 80006b6:	f000 fb27 	bl	8000d08 <buzzer>
		  chronometer();
 80006ba:	f7ff ff13 	bl	80004e4 <chronometer>
		  break;
 80006be:	e006      	b.n	80006ce <main+0xe6>
	  case 5:
		  buzzer(5);
 80006c0:	2005      	movs	r0, #5
 80006c2:	f000 fb21 	bl	8000d08 <buzzer>
		  temporizador();
 80006c6:	f7ff ff89 	bl	80005dc <temporizador>
		  break;
 80006ca:	e000      	b.n	80006ce <main+0xe6>
 	  default:
 		  break;
 80006cc:	bf00      	nop
	  }
	  if((alarma[0][1] == counterH && alarma[0][2] == counterM)){
 80006ce:	4b51      	ldr	r3, [pc, #324]	; (8000814 <main+0x22c>)
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b49      	ldr	r3, [pc, #292]	; (80007fc <main+0x214>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	429a      	cmp	r2, r3
 80006dc:	d1ad      	bne.n	800063a <main+0x52>
 80006de:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <main+0x22c>)
 80006e0:	789a      	ldrb	r2, [r3, #2]
 80006e2:	4b47      	ldr	r3, [pc, #284]	; (8000800 <main+0x218>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d1a6      	bne.n	800063a <main+0x52>
		  lcd_put_cur(1, 4);
 80006ec:	2104      	movs	r1, #4
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fdd2 	bl	8000298 <lcd_put_cur>
		  lcd_send_string("alarma!!");
 80006f4:	4848      	ldr	r0, [pc, #288]	; (8000818 <main+0x230>)
 80006f6:	f7ff fe2a 	bl	800034e <lcd_send_string>
		  buzzer(4);
 80006fa:	2004      	movs	r0, #4
 80006fc:	f000 fb04 	bl	8000d08 <buzzer>
		  if (alarma[0][1] == counterH)
 8000700:	4b44      	ldr	r3, [pc, #272]	; (8000814 <main+0x22c>)
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <main+0x214>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	429a      	cmp	r2, r3
 800070e:	d103      	bne.n	8000718 <main+0x130>
			  flag = 0;
 8000710:	4b42      	ldr	r3, [pc, #264]	; (800081c <main+0x234>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
 8000716:	e016      	b.n	8000746 <main+0x15e>
		  else if (alarma[1][1] == counterH)
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <main+0x22c>)
 800071a:	78db      	ldrb	r3, [r3, #3]
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b37      	ldr	r3, [pc, #220]	; (80007fc <main+0x214>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	429a      	cmp	r2, r3
 8000726:	d103      	bne.n	8000730 <main+0x148>
			  flag = 1;
 8000728:	4b3c      	ldr	r3, [pc, #240]	; (800081c <main+0x234>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00a      	b.n	8000746 <main+0x15e>
		  else
			  flag = 2;
 8000730:	4b3a      	ldr	r3, [pc, #232]	; (800081c <main+0x234>)
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
		  while(reference != 200 || reference != 201){
 8000736:	e006      	b.n	8000746 <main+0x15e>
			  CDC_Transmit_FS(reference,1);
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <main+0x228>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f007 f86d 	bl	8007820 <CDC_Transmit_FS>
		  while(reference != 200 || reference != 201){
 8000746:	4b32      	ldr	r3, [pc, #200]	; (8000810 <main+0x228>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2bc8      	cmp	r3, #200	; 0xc8
 800074e:	d1f3      	bne.n	8000738 <main+0x150>
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <main+0x228>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2bc9      	cmp	r3, #201	; 0xc9
 8000758:	d1ee      	bne.n	8000738 <main+0x150>
		  }
		  if(reference == 200){
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <main+0x228>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2bc8      	cmp	r3, #200	; 0xc8
 8000762:	d11c      	bne.n	800079e <main+0x1b6>
			  switch(flag){
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <main+0x234>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <main+0x18a>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d007      	beq.n	8000780 <main+0x198>
 8000770:	e00d      	b.n	800078e <main+0x1a6>
			  case 0:
				  alarma[0][1] += 2;
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <main+0x22c>)
 8000774:	785b      	ldrb	r3, [r3, #1]
 8000776:	3302      	adds	r3, #2
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <main+0x22c>)
 800077c:	705a      	strb	r2, [r3, #1]
				  break;
 800077e:	e030      	b.n	80007e2 <main+0x1fa>
			  case 1:
				  alarma[1][1] += 2;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <main+0x22c>)
 8000782:	78db      	ldrb	r3, [r3, #3]
 8000784:	3302      	adds	r3, #2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <main+0x22c>)
 800078a:	70da      	strb	r2, [r3, #3]
				  break;
 800078c:	e029      	b.n	80007e2 <main+0x1fa>
			  default:
				  alarma[2][1] += 2;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <main+0x22c>)
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	3302      	adds	r3, #2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <main+0x22c>)
 8000798:	715a      	strb	r2, [r3, #5]
				  break;
 800079a:	bf00      	nop
 800079c:	e021      	b.n	80007e2 <main+0x1fa>
			  }
		  }
		  else if(reference == 201){
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <main+0x228>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2bc9      	cmp	r3, #201	; 0xc9
 80007a6:	d11b      	bne.n	80007e0 <main+0x1f8>
			  switch(flag){
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <main+0x234>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <main+0x1ce>
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d007      	beq.n	80007c4 <main+0x1dc>
 80007b4:	e00d      	b.n	80007d2 <main+0x1ea>
			  case 0:
				  alarma[0][0] = 0;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <main+0x22c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
				  alarma[0][1] = 0;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <main+0x22c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	705a      	strb	r2, [r3, #1]
				  break;
 80007c2:	e00e      	b.n	80007e2 <main+0x1fa>
			  case 1:
				  alarma[1][0] = 0;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <main+0x22c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	709a      	strb	r2, [r3, #2]
				  alarma[1][1] = 0;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <main+0x22c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	70da      	strb	r2, [r3, #3]
				  break;
 80007d0:	e007      	b.n	80007e2 <main+0x1fa>
			  default:
				  alarma[2][0] = 0;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <main+0x22c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	711a      	strb	r2, [r3, #4]
				  alarma[2][1] = 0;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <main+0x22c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	715a      	strb	r2, [r3, #5]
				  break;
 80007de:	e000      	b.n	80007e2 <main+0x1fa>
			  }
		  }
 80007e0:	bf00      	nop
		  reference = 254;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <main+0x228>)
 80007e4:	22fe      	movs	r2, #254	; 0xfe
 80007e6:	701a      	strb	r2, [r3, #0]
	  sprintf(hrs,"%02d:%02d:%02d",counterH,counterM,counterS);
 80007e8:	e727      	b.n	800063a <main+0x52>
 80007ea:	bf00      	nop
 80007ec:	20000498 	.word	0x20000498
 80007f0:	200004e0 	.word	0x200004e0
 80007f4:	20000450 	.word	0x20000450
 80007f8:	080088d4 	.word	0x080088d4
 80007fc:	20000002 	.word	0x20000002
 8000800:	20000000 	.word	0x20000000
 8000804:	20000208 	.word	0x20000208
 8000808:	08008888 	.word	0x08008888
 800080c:	20000448 	.word	0x20000448
 8000810:	20000004 	.word	0x20000004
 8000814:	20000210 	.word	0x20000210
 8000818:	080088e4 	.word	0x080088e4
 800081c:	20000216 	.word	0x20000216

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	2228      	movs	r2, #40	; 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fbfe 	bl	8008030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800086c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fa26 	bl	8002cc8 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000882:	f000 fa67 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000896:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fc90 	bl	80031c8 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008ae:	f000 fa51 	bl	8000d54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008b2:	2310      	movs	r3, #16
 80008b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fded 	bl	800349c <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008c8:	f000 fa44 	bl	8000d54 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3750      	adds	r7, #80	; 0x50
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM1_Init+0x98>)
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <MX_TIM1_Init+0x9c>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM1_Init+0x98>)
 80008f8:	2247      	movs	r2, #71	; 0x47
 80008fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM1_Init+0x98>)
 8000904:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_TIM1_Init+0x98>)
 800091e:	f002 fe73 	bl	8003608 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 fa14 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_TIM1_Init+0x98>)
 800093a:	f003 f859 	bl	80039f0 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000944:	f000 fa06 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM1_Init+0x98>)
 8000956:	f003 fa1f 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000960:	f000 f9f8 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000498 	.word	0x20000498
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_TIM2_Init+0x98>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_TIM2_Init+0x98>)
 800099a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800099e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009bc:	f002 fe24 	bl	8003608 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009c6:	f000 f9c5 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009d8:	f003 f80a 	bl	80039f0 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009e2:	f000 f9b7 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_TIM2_Init+0x98>)
 80009f4:	f003 f9d0 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009fe:	f000 f9a9 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200004e0 	.word	0x200004e0

08000a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <MX_TIM3_Init+0x98>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a34:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000a38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a42:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a56:	f002 fdd7 	bl	8003608 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a60:	f000 f978 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a72:	f002 ffbd 	bl	80039f0 <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a7c:	f000 f96a 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM3_Init+0x94>)
 8000a8e:	f003 f983 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f95c 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000450 	.word	0x20000450
 8000aa8:	40000400 	.word	0x40000400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ade:	f043 0320 	orr.w	r3, r3, #32
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a2a      	ldr	r2, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b26:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0xf8>)
 8000b28:	f000 fd32 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	21f0      	movs	r1, #240	; 0xf0
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <MX_GPIO_Init+0xfc>)
 8000b32:	f000 fd2d 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RS_Pin|EN_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	21a1      	movs	r1, #161	; 0xa1
 8000b3a:	481c      	ldr	r0, [pc, #112]	; (8000bac <MX_GPIO_Init+0x100>)
 8000b3c:	f000 fd28 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <MX_GPIO_Init+0xf8>)
 8000b5a:	f000 fbbf 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000b5e:	23f0      	movs	r3, #240	; 0xf0
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_GPIO_Init+0xfc>)
 8000b76:	f000 fbb1 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RS_Pin|EN_Pin;
 8000b7a:	23a1      	movs	r3, #161	; 0xa1
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <MX_GPIO_Init+0x100>)
 8000b92:	f000 fba3 	bl	80012dc <HAL_GPIO_Init>

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc0:	d13b      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x8a>
		milis++;
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bce:	701a      	strb	r2, [r3, #0]
		if (milis == 10){
 8000bd0:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b0a      	cmp	r3, #10
 8000bd8:	d109      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x3e>
			bufferS++;
 8000bda:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000be6:	701a      	strb	r2, [r3, #0]
			milis = 0;
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		}
		if(bufferS == 60){
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b3c      	cmp	r3, #60	; 0x3c
 8000bf6:	d109      	bne.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x5c>
			bufferS = 1;
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
			bufferM++;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3301      	adds	r3, #1
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c0a:	701a      	strb	r2, [r3, #0]
		}
		if(bufferM == 59){
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b3b      	cmp	r3, #59	; 0x3b
 8000c14:	d109      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0x7a>
			bufferM = 1;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
			bufferH++;
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c28:	701a      	strb	r2, [r3, #0]
		}
		if(bufferH == 24)
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b18      	cmp	r3, #24
 8000c32:	d102      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x8a>
			bufferH = 0;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d133      	bne.n	8000cac <HAL_TIM_PeriodElapsedCallback+0xfc>
		counterS++;
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c50:	801a      	strh	r2, [r3, #0]
		service++;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c5e:	801a      	strh	r2, [r3, #0]
		if(counterS == 60){
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	2b3c      	cmp	r3, #60	; 0x3c
 8000c68:	d109      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0xce>
			counterS = 0;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
			counterM++;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c7c:	701a      	strb	r2, [r3, #0]
		}
		if(counterM == 59){
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b3b      	cmp	r3, #59	; 0x3b
 8000c86:	d109      	bne.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0xec>
			counterM = 1;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
			counterH++;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c9a:	801a      	strh	r2, [r3, #0]
		}
		if (counterH == 24){
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2b18      	cmp	r3, #24
 8000ca4:	d102      	bne.n	8000cac <HAL_TIM_PeriodElapsedCallback+0xfc>
			counterH = 0;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000207 	.word	0x20000207
 8000cbc:	20000204 	.word	0x20000204
 8000cc0:	20000205 	.word	0x20000205
 8000cc4:	20000206 	.word	0x20000206
 8000cc8:	40000400 	.word	0x40000400
 8000ccc:	20000208 	.word	0x20000208
 8000cd0:	2000020a 	.word	0x2000020a
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000002 	.word	0x20000002

08000cdc <usbrxcallback>:
void usbrxcallback(uint8_t* Buf, uint32_t Len){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	reference = Buf[0];
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <usbrxcallback+0x24>)
 8000cec:	701a      	strb	r2, [r3, #0]
	reference1 = Buf[1];
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	785a      	ldrb	r2, [r3, #1]
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <usbrxcallback+0x28>)
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000004 	.word	0x20000004
 8000d04:	2000020c 	.word	0x2000020c

08000d08 <buzzer>:
void buzzer(uint8_t f){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i<f;i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e012      	b.n	8000d3e <buzzer+0x36>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <buzzer+0x48>)
 8000d1e:	f000 fc37 	bl	8001590 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000d22:	20c8      	movs	r0, #200	; 0xc8
 8000d24:	f000 f9aa 	bl	800107c <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <buzzer+0x48>)
 8000d2e:	f000 fc2f 	bl	8001590 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000d32:	20c8      	movs	r0, #200	; 0xc8
 8000d34:	f000 f9a2 	bl	800107c <HAL_Delay>
	for(i = 0; i<f;i++){
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3e8      	bcc.n	8000d18 <buzzer+0x10>
	}
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <Error_Handler+0x6>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x60>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_MspInit+0x60>)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_TIM_Base_MspInit+0x9c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10c      	bne.n	8000dec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dea:	e032      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df4:	d114      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201c      	movs	r0, #28
 8000e14:	f000 fa2b 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e18:	201c      	movs	r0, #28
 8000e1a:	f000 fa44 	bl	80012a6 <HAL_NVIC_EnableIRQ>
}
 8000e1e:	e018      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_TIM_Base_MspInit+0xa4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d113      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0xa0>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	201d      	movs	r0, #29
 8000e48:	f000 fa11 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e4c:	201d      	movs	r0, #29
 8000e4e:	f000 fa2a 	bl	80012a6 <HAL_NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40000400 	.word	0x40000400

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f8c9 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ebe:	f000 fcb0 	bl	8001822 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200011c0 	.word	0x200011c0

08000ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM2_IRQHandler+0x10>)
 8000ed2:	f002 fc85 	bl	80037e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200004e0 	.word	0x200004e0

08000ee0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM3_IRQHandler+0x10>)
 8000ee6:	f002 fc7b 	bl	80037e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000450 	.word	0x20000450

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f007 f85a 	bl	8007fdc <__errno>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20005000 	.word	0x20005000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000218 	.word	0x20000218
 8000f5c:	200014b0 	.word	0x200014b0

08000f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f6e:	e003      	b.n	8000f78 <LoopCopyDataInit>

08000f70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f76:	3104      	adds	r1, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f80:	d3f6      	bcc.n	8000f70 <CopyDataInit>
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f84:	e002      	b.n	8000f8c <LoopFillZerobss>

08000f86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f88:	f842 3b04 	str.w	r3, [r2], #4

08000f8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f90:	d3f9      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f92:	f7ff ffe5 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f007 f827 	bl	8007fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fb25 	bl	80005e8 <main>
  bx lr
 8000f9e:	4770      	bx	lr
  ldr r3, =_sidata
 8000fa0:	08008998 	.word	0x08008998
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fa8:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8000fac:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8000fb0:	200014b0 	.word	0x200014b0

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f945 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fec2 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f95d 	bl	80012c2 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 f925 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000008 	.word	0x20000008
 800103c:	20000010 	.word	0x20000010
 8001040:	2000000c 	.word	0x2000000c

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000010 	.word	0x20000010
 8001064:	20000528 	.word	0x20000528

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20000528 	.word	0x20000528

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000010 	.word	0x20000010

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <__NVIC_EnableIRQ+0x34>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001238:	f7ff ff90 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff2d 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff42 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff35 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e127      	b.n	8001540 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f0:	2201      	movs	r2, #1
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8116 	bne.w	800153a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b12      	cmp	r3, #18
 8001314:	d034      	beq.n	8001380 <HAL_GPIO_Init+0xa4>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d80d      	bhi.n	8001336 <HAL_GPIO_Init+0x5a>
 800131a:	2b02      	cmp	r3, #2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x9a>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d804      	bhi.n	800132c <HAL_GPIO_Init+0x50>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d031      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d01c      	beq.n	8001364 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132a:	e048      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800132c:	2b03      	cmp	r3, #3
 800132e:	d043      	beq.n	80013b8 <HAL_GPIO_Init+0xdc>
 8001330:	2b11      	cmp	r3, #17
 8001332:	d01b      	beq.n	800136c <HAL_GPIO_Init+0x90>
          break;
 8001334:	e043      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001336:	4a89      	ldr	r2, [pc, #548]	; (800155c <HAL_GPIO_Init+0x280>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d026      	beq.n	800138a <HAL_GPIO_Init+0xae>
 800133c:	4a87      	ldr	r2, [pc, #540]	; (800155c <HAL_GPIO_Init+0x280>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d806      	bhi.n	8001350 <HAL_GPIO_Init+0x74>
 8001342:	4a87      	ldr	r2, [pc, #540]	; (8001560 <HAL_GPIO_Init+0x284>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d020      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001348:	4a86      	ldr	r2, [pc, #536]	; (8001564 <HAL_GPIO_Init+0x288>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01d      	beq.n	800138a <HAL_GPIO_Init+0xae>
          break;
 800134e:	e036      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001350:	4a85      	ldr	r2, [pc, #532]	; (8001568 <HAL_GPIO_Init+0x28c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001356:	4a85      	ldr	r2, [pc, #532]	; (800156c <HAL_GPIO_Init+0x290>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d016      	beq.n	800138a <HAL_GPIO_Init+0xae>
 800135c:	4a84      	ldr	r2, [pc, #528]	; (8001570 <HAL_GPIO_Init+0x294>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0xae>
          break;
 8001362:	e02c      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e028      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e023      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	3308      	adds	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e01e      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	330c      	adds	r3, #12
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e019      	b.n	80013be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001392:	2304      	movs	r3, #4
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e012      	b.n	80013be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	611a      	str	r2, [r3, #16]
          break;
 80013aa:	e008      	b.n	80013be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	615a      	str	r2, [r3, #20]
          break;
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d801      	bhi.n	80013c8 <HAL_GPIO_Init+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	e001      	b.n	80013cc <HAL_GPIO_Init+0xf0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3304      	adds	r3, #4
 80013cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2bff      	cmp	r3, #255	; 0xff
 80013d2:	d802      	bhi.n	80013da <HAL_GPIO_Init+0xfe>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x104>
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3b08      	subs	r3, #8
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	210f      	movs	r1, #15
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	401a      	ands	r2, r3
 80013f2:	6a39      	ldr	r1, [r7, #32]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	431a      	orrs	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8096 	beq.w	800153a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b56      	ldr	r3, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x298>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001426:	4a54      	ldr	r2, [pc, #336]	; (8001578 <HAL_GPIO_Init+0x29c>)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x19e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2a4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x19a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_GPIO_Init+0x2a8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x196>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a48      	ldr	r2, [pc, #288]	; (8001588 <HAL_GPIO_Init+0x2ac>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x192>
 800146a:	2303      	movs	r3, #3
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 800146e:	2304      	movs	r3, #4
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x1a0>
 800147a:	2300      	movs	r3, #0
 800147c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800148c:	493a      	ldr	r1, [pc, #232]	; (8001578 <HAL_GPIO_Init+0x29c>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4938      	ldr	r1, [pc, #224]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	e006      	b.n	80014c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4933      	ldr	r1, [pc, #204]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014be:	4013      	ands	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	492e      	ldr	r1, [pc, #184]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
 80014da:	e006      	b.n	80014ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4929      	ldr	r1, [pc, #164]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4924      	ldr	r1, [pc, #144]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	43db      	mvns	r3, r3
 800150c:	491f      	ldr	r1, [pc, #124]	; (800158c <HAL_GPIO_Init+0x2b0>)
 800150e:	4013      	ands	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	491a      	ldr	r1, [pc, #104]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_GPIO_Init+0x2b0>)
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	43db      	mvns	r3, r3
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001536:	4013      	ands	r3, r2
 8001538:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	f47f aed0 	bne.w	80012f0 <HAL_GPIO_Init+0x14>
  }
}
 8001550:	bf00      	nop
 8001552:	372c      	adds	r7, #44	; 0x2c
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	10210000 	.word	0x10210000
 8001560:	10110000 	.word	0x10110000
 8001564:	10120000 	.word	0x10120000
 8001568:	10310000 	.word	0x10310000
 800156c:	10320000 	.word	0x10320000
 8001570:	10220000 	.word	0x10220000
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	40010800 	.word	0x40010800
 8001580:	40010c00 	.word	0x40010c00
 8001584:	40011000 	.word	0x40011000
 8001588:	40011400 	.word	0x40011400
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af06      	add	r7, sp, #24
 80015c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0fd      	b.n	80017ce <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f006 fa4e 	bl	8007a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fc63 	bl	8003ec4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	687e      	ldr	r6, [r7, #4]
 8001606:	466d      	mov	r5, sp
 8001608:	f106 0410 	add.w	r4, r6, #16
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	602b      	str	r3, [r5, #0]
 8001614:	1d33      	adds	r3, r6, #4
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	6838      	ldr	r0, [r7, #0]
 800161a:	f002 fc2d 	bl	8003e78 <USB_CoreInit>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0ce      	b.n	80017ce <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fc5e 	bl	8003ef8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e04c      	b.n	80016dc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3301      	adds	r3, #1
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	b298      	uxth	r0, r3
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	3336      	adds	r3, #54	; 0x36
 8001680:	4602      	mov	r2, r0
 8001682:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3303      	adds	r3, #3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3338      	adds	r3, #56	; 0x38
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333c      	adds	r3, #60	; 0x3c
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3340      	adds	r3, #64	; 0x40
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3301      	adds	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3ad      	bcc.n	8001642 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e044      	b.n	8001776 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3b5      	bcc.n	80016ec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	687e      	ldr	r6, [r7, #4]
 8001788:	466d      	mov	r5, sp
 800178a:	f106 0410 	add.w	r4, r6, #16
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	1d33      	adds	r3, r6, #4
 8001798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179a:	6838      	ldr	r0, [r7, #0]
 800179c:	f002 fbb8 	bl	8003f10 <USB_DevInit>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00d      	b.n	80017ce <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fb52 	bl	8005e70 <USB_DevDisconnect>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_Start+0x16>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e016      	b.n	800181a <HAL_PCD_Start+0x44>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fb4d 	bl	8003e98 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017fe:	2101      	movs	r1, #1
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f006 fbb4 	bl	8007f6e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fb26 	bl	8005e5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b088      	sub	sp, #32
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f004 fb28 	bl	8005e84 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800183e:	d102      	bne.n	8001846 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fb61 	bl	8001f08 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f004 fb1a 	bl	8005e84 <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185a:	d112      	bne.n	8001882 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800186e:	b292      	uxth	r2, r2
 8001870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f006 f982 	bl	8007b7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800187a:	2100      	movs	r1, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f925 	bl	8001acc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fafc 	bl	8005e84 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001896:	d10b      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018aa:	b292      	uxth	r2, r2
 80018ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fae5 	bl	8005e84 <USB_ReadInterrupts>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018c4:	d10b      	bne.n	80018de <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d8:	b292      	uxth	r2, r2
 80018da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 face 	bl	8005e84 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f2:	d126      	bne.n	8001942 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0204 	bic.w	r2, r2, #4
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0208 	bic.w	r2, r2, #8
 800191e:	b292      	uxth	r2, r2
 8001920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f006 f963 	bl	8007bf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001932:	b29a      	uxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800193c:	b292      	uxth	r2, r2
 800193e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fa9c 	bl	8005e84 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001956:	f040 8084 	bne.w	8001a62 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	77fb      	strb	r3, [r7, #31]
 800195e:	e011      	b.n	8001984 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	441a      	add	r2, r3
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	8812      	ldrh	r2, [r2, #0]
 8001970:	b292      	uxth	r2, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	f107 0120 	add.w	r1, r7, #32
 8001978:	440b      	add	r3, r1
 800197a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	3301      	adds	r3, #1
 8001982:	77fb      	strb	r3, [r7, #31]
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d9ea      	bls.n	8001960 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	b292      	uxth	r2, r2
 800199e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	b292      	uxth	r2, r2
 80019b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019ba:	bf00      	nop
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f6      	beq.n	80019bc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e0:	b292      	uxth	r2, r2
 80019e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	77fb      	strb	r3, [r7, #31]
 80019ea:	e010      	b.n	8001a0e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	4611      	mov	r1, r2
 80019f4:	7ffa      	ldrb	r2, [r7, #31]
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	440a      	add	r2, r1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	f107 0120 	add.w	r1, r7, #32
 8001a00:	440b      	add	r3, r1
 8001a02:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a06:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a08:	7ffb      	ldrb	r3, [r7, #31]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	77fb      	strb	r3, [r7, #31]
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b07      	cmp	r3, #7
 8001a12:	d9eb      	bls.n	80019ec <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0208 	orr.w	r2, r2, #8
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0204 	orr.w	r2, r2, #4
 8001a56:	b292      	uxth	r2, r2
 8001a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f006 f8ad 	bl	8007bbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fa0c 	bl	8005e84 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a76:	d10e      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f006 f866 	bl	8007b62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 f9f2 	bl	8005e84 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_SetAddress+0x1a>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e013      	b.n	8001b0e <HAL_PCD_SetAddress+0x42>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f999 	bl	8005e36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	70fb      	strb	r3, [r7, #3]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	803b      	strh	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da0e      	bge.n	8001b5a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	705a      	strb	r2, [r3, #1]
 8001b58:	e00e      	b.n	8001b78 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 0207 	and.w	r2, r3, #7
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b84:	883a      	ldrh	r2, [r7, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d102      	bne.n	8001bae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_EP_Open+0xa6>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e00e      	b.n	8001bda <HAL_PCD_EP_Open+0xc4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 f9c0 	bl	8003f50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da0e      	bge.n	8001c14 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	705a      	strb	r2, [r3, #1]
 8001c12:	e00e      	b.n	8001c32 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_EP_Close+0x6a>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e00e      	b.n	8001c6a <HAL_PCD_EP_Close+0x88>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68f9      	ldr	r1, [r7, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fce2 	bl	8004624 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	7afb      	ldrb	r3, [r7, #11]
 8001c84:	f003 0207 	and.w	r2, r3, #7
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d106      	bne.n	8001cd6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fe94 	bl	80049fc <USB_EPStartXfer>
 8001cd4:	e005      	b.n	8001ce2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 fe8d 	bl	80049fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 0207 	and.w	r2, r3, #7
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	460b      	mov	r3, r1
 8001d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2201      	movs	r2, #1
 8001d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fe3a 	bl	80049fc <USB_EPStartXfer>
 8001d88:	e005      	b.n	8001d96 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6979      	ldr	r1, [r7, #20]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 fe33 	bl	80049fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 0207 	and.w	r2, r3, #7
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d901      	bls.n	8001dbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e04c      	b.n	8001e58 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da0e      	bge.n	8001de4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
 8001de2:	e00c      	b.n	8001dfe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_PCD_EP_SetStall+0x7e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e01c      	b.n	8001e58 <HAL_PCD_EP_SetStall+0xb8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68f9      	ldr	r1, [r7, #12]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 ff05 	bl	8005c3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d108      	bne.n	8001e4e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4610      	mov	r0, r2
 8001e4a:	f004 f82a 	bl	8005ea2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d901      	bls.n	8001e7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e040      	b.n	8001f00 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da0e      	bge.n	8001ea4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	705a      	strb	r2, [r3, #1]
 8001ea2:	e00e      	b.n	8001ec2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 0207 	and.w	r2, r3, #7
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_PCD_EP_ClrStall+0x82>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e00e      	b.n	8001f00 <HAL_PCD_EP_ClrStall+0xa0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68f9      	ldr	r1, [r7, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fef3 	bl	8005cdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f10:	e2df      	b.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 8158 	bne.w	80021e2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d152      	bne.n	8001fe2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4c:	81fb      	strh	r3, [r7, #14]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3328      	adds	r3, #40	; 0x28
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f005 fdc3 	bl	8007b2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 828e 	beq.w	80024d2 <PCD_EP_ISR_Handler+0x5ca>
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 8289 	bne.w	80024d2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fe0:	e277      	b.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ff2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d034      	beq.n	8002066 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	3306      	adds	r3, #6
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800203a:	b29b      	uxth	r3, r3
 800203c:	f003 ff80 	bl	8005f40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29a      	uxth	r2, r3
 8002048:	f640 738f 	movw	r3, #3983	; 0xf8f
 800204c:	4013      	ands	r3, r2
 800204e:	823b      	strh	r3, [r7, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	8a3a      	ldrh	r2, [r7, #16]
 8002056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800205a:	b292      	uxth	r2, r2
 800205c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f005 fd38 	bl	8007ad4 <HAL_PCD_SetupStageCallback>
 8002064:	e235      	b.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002066:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800206a:	2b00      	cmp	r3, #0
 800206c:	f280 8231 	bge.w	80024d2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29a      	uxth	r2, r3
 8002078:	f640 738f 	movw	r3, #3983	; 0xf8f
 800207c:	4013      	ands	r3, r2
 800207e:	83bb      	strh	r3, [r7, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	8bba      	ldrh	r2, [r7, #28]
 8002086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800208a:	b292      	uxth	r2, r2
 800208c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	3306      	adds	r3, #6
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d019      	beq.n	80020f6 <PCD_EP_ISR_Handler+0x1ee>
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d015      	beq.n	80020f6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	6959      	ldr	r1, [r3, #20]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f003 ff30 	bl	8005f40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	441a      	add	r2, r3
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f005 fd01 	bl	8007af8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4413      	add	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d112      	bne.n	8002144 <PCD_EP_ISR_Handler+0x23c>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002128:	b29a      	uxth	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29a      	uxth	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e02f      	b.n	80021a4 <PCD_EP_ISR_Handler+0x29c>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b3e      	cmp	r3, #62	; 0x3e
 800214a:	d813      	bhi.n	8002174 <PCD_EP_ISR_Handler+0x26c>
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <PCD_EP_ISR_Handler+0x25e>
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	3301      	adds	r3, #1
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	b29b      	uxth	r3, r3
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	b29a      	uxth	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	e017      	b.n	80021a4 <PCD_EP_ISR_Handler+0x29c>
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <PCD_EP_ISR_Handler+0x286>
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	3b01      	subs	r3, #1
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	b29b      	uxth	r3, r3
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	b29b      	uxth	r3, r3
 8002196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219e:	b29a      	uxth	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b4:	827b      	strh	r3, [r7, #18]
 80021b6:	8a7b      	ldrh	r3, [r7, #18]
 80021b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021bc:	827b      	strh	r3, [r7, #18]
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021c4:	827b      	strh	r3, [r7, #18]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	8a7b      	ldrh	r3, [r7, #18]
 80021cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8013      	strh	r3, [r2, #0]
 80021e0:	e177      	b.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f280 80ea 	bge.w	80023d2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29a      	uxth	r2, r3
 8002210:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002214:	4013      	ands	r3, r2
 8002216:	853b      	strh	r3, [r7, #40]	; 0x28
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002228:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222c:	b292      	uxth	r2, r2
 800222e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002230:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d122      	bne.n	8002294 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	3306      	adds	r3, #6
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002276:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8087 	beq.w	800238e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	88da      	ldrh	r2, [r3, #6]
 800228c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800228e:	f003 fe57 	bl	8005f40 <USB_ReadPMA>
 8002292:	e07c      	b.n	800238e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	78db      	ldrb	r3, [r3, #3]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d108      	bne.n	80022ae <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800229c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800229e:	461a      	mov	r2, r3
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f923 	bl	80024ee <HAL_PCD_EP_DB_Receive>
 80022a8:	4603      	mov	r3, r0
 80022aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022ac:	e06f      	b.n	800238e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	441a      	add	r2, r3
 80022d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d021      	beq.n	800234c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	3302      	adds	r3, #2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02a      	beq.n	800238e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	6959      	ldr	r1, [r3, #20]
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	891a      	ldrh	r2, [r3, #8]
 8002344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002346:	f003 fdfb 	bl	8005f40 <USB_ReadPMA>
 800234a:	e020      	b.n	800238e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	3306      	adds	r3, #6
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002376:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	895a      	ldrh	r2, [r3, #10]
 8002388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238a:	f003 fdd9 	bl	8005f40 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002394:	441a      	add	r2, r3
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a0:	441a      	add	r2, r3
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <PCD_EP_ISR_Handler+0x4b0>
 80023ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d206      	bcs.n	80023c6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f005 fb9a 	bl	8007af8 <HAL_PCD_DataOutStageCallback>
 80023c4:	e005      	b.n	80023d2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 fb15 	bl	80049fc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d07a      	beq.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80023dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	843b      	strh	r3, [r7, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	8c3b      	ldrh	r3, [r7, #32]
 800241c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002424:	b29b      	uxth	r3, r3
 8002426:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	78db      	ldrb	r3, [r3, #3]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d108      	bne.n	8002442 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002434:	2b02      	cmp	r3, #2
 8002436:	d146      	bne.n	80024c6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d141      	bne.n	80024c6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	3302      	adds	r3, #2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	8bfb      	ldrh	r3, [r7, #30]
 8002472:	429a      	cmp	r2, r3
 8002474:	d906      	bls.n	8002484 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	8bfb      	ldrh	r3, [r7, #30]
 800247c:	1ad2      	subs	r2, r2, r3
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	619a      	str	r2, [r3, #24]
 8002482:	e002      	b.n	800248a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f005 fb48 	bl	8007b2e <HAL_PCD_DataInStageCallback>
 800249e:	e018      	b.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	441a      	add	r2, r3
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	8bfb      	ldrh	r3, [r7, #30]
 80024b2:	441a      	add	r2, r3
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 fa9c 	bl	80049fc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024c4:	e005      	b.n	80024d2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c8:	461a      	mov	r2, r3
 80024ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f91b 	bl	8002708 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21b      	sxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f6ff ad17 	blt.w	8001f12 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3738      	adds	r7, #56	; 0x38
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b088      	sub	sp, #32
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d07e      	beq.n	8002604 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	3302      	adds	r3, #2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	8b7b      	ldrh	r3, [r7, #26]
 8002536:	429a      	cmp	r2, r3
 8002538:	d306      	bcc.n	8002548 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	8b7b      	ldrh	r3, [r7, #26]
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	e002      	b.n	800254e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d123      	bne.n	800259e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	833b      	strh	r3, [r7, #24]
 8002572:	8b3b      	ldrh	r3, [r7, #24]
 8002574:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002578:	833b      	strh	r3, [r7, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	8b3b      	ldrh	r3, [r7, #24]
 800258a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01f      	beq.n	80025e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	82fb      	strh	r3, [r7, #22]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	8afb      	ldrh	r3, [r7, #22]
 80025d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025e8:	8b7b      	ldrh	r3, [r7, #26]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8087 	beq.w	80026fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6959      	ldr	r1, [r3, #20]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	891a      	ldrh	r2, [r3, #8]
 80025fc:	8b7b      	ldrh	r3, [r7, #26]
 80025fe:	f003 fc9f 	bl	8005f40 <USB_ReadPMA>
 8002602:	e07c      	b.n	80026fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	3306      	adds	r3, #6
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	429a      	cmp	r2, r3
 8002636:	d306      	bcc.n	8002646 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	619a      	str	r2, [r3, #24]
 8002644:	e002      	b.n	800264c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d123      	bne.n	800269c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	83fb      	strh	r3, [r7, #30]
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002676:	83fb      	strh	r3, [r7, #30]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	8bfb      	ldrh	r3, [r7, #30]
 8002688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800268c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002698:	b29b      	uxth	r3, r3
 800269a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11f      	bne.n	80026e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	83bb      	strh	r3, [r7, #28]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8bbb      	ldrh	r3, [r7, #28]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026e6:	8b7b      	ldrh	r3, [r7, #26]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6959      	ldr	r1, [r3, #20]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	895a      	ldrh	r2, [r3, #10]
 80026f8:	8b7b      	ldrh	r3, [r7, #26]
 80026fa:	f003 fc21 	bl	8005f40 <USB_ReadPMA>
    }
  }

  return count;
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b092      	sub	sp, #72	; 0x48
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8132 	beq.w	8002986 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	3302      	adds	r3, #2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002752:	429a      	cmp	r2, r3
 8002754:	d906      	bls.n	8002764 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800275c:	1ad2      	subs	r2, r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	e002      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d12c      	bne.n	80027cc <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f005 f9d8 	bl	8007b2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 822f 	beq.w	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	827b      	strh	r3, [r7, #18]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	441a      	add	r2, r3
 80027b4:	8a7b      	ldrh	r3, [r7, #18]
 80027b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	8013      	strh	r3, [r2, #0]
 80027ca:	e20d      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	441a      	add	r2, r3
 8002800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	b29b      	uxth	r3, r3
 8002814:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 81e3 	bne.w	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002828:	441a      	add	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002834:	441a      	add	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	429a      	cmp	r2, r3
 8002844:	d309      	bcc.n	800285a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6a1a      	ldr	r2, [r3, #32]
 8002850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002852:	1ad2      	subs	r2, r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	621a      	str	r2, [r3, #32]
 8002858:	e014      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002862:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800286e:	e009      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d155      	bne.n	8002938 <HAL_PCD_EP_DB_Transmit+0x230>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	011a      	lsls	r2, r3, #4
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d112      	bne.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	801a      	strh	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d8:	b29a      	uxth	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	e047      	b.n	8002970 <HAL_PCD_EP_DB_Transmit+0x268>
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	2b3e      	cmp	r3, #62	; 0x3e
 80028e4:	d811      	bhi.n	800290a <HAL_PCD_EP_DB_Transmit+0x202>
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_PCD_EP_DB_Transmit+0x1f4>
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	3301      	adds	r3, #1
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	b29b      	uxth	r3, r3
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	b29a      	uxth	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	e032      	b.n	8002970 <HAL_PCD_EP_DB_Transmit+0x268>
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_PCD_EP_DB_Transmit+0x218>
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	b29b      	uxth	r3, r3
 8002924:	029b      	lsls	r3, r3, #10
 8002926:	b29b      	uxth	r3, r3
 8002928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002930:	b29a      	uxth	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	e01b      	b.n	8002970 <HAL_PCD_EP_DB_Transmit+0x268>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d117      	bne.n	8002970 <HAL_PCD_EP_DB_Transmit+0x268>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	4413      	add	r3, r2
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	011a      	lsls	r2, r3, #4
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	4413      	add	r3, r2
 8002962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	b29a      	uxth	r2, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	6959      	ldr	r1, [r3, #20]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	891a      	ldrh	r2, [r3, #8]
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	b29b      	uxth	r3, r3
 8002980:	f003 fa9a 	bl	8005eb8 <USB_WritePMA>
 8002984:	e130      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	3306      	adds	r3, #6
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d306      	bcc.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029c0:	1ad2      	subs	r2, r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	619a      	str	r2, [r3, #24]
 80029c6:	e002      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d12c      	bne.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f005 f8a6 	bl	8007b2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 80fd 	bne.w	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
 8002a2e:	e0db      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11f      	bne.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a54:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	441a      	add	r2, r3
 8002a64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 80b1 	bne.w	8002be8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a8c:	441a      	add	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a98:	441a      	add	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d309      	bcc.n	8002abe <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	1ad2      	subs	r2, r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	621a      	str	r2, [r3, #32]
 8002abc:	e014      	b.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ad2:	e009      	b.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	785b      	ldrb	r3, [r3, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d155      	bne.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	647b      	str	r3, [r7, #68]	; 0x44
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0a:	4413      	add	r3, r2
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	011a      	lsls	r2, r3, #4
 8002b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b16:	4413      	add	r3, r2
 8002b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d112      	bne.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x442>
 8002b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	e044      	b.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b4e:	d811      	bhi.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b62:	3301      	adds	r3, #1
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e02f      	b.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x482>
 8002b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b86:	3b01      	subs	r3, #1
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	e018      	b.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	785b      	ldrb	r3, [r3, #1]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d114      	bne.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	4413      	add	r3, r2
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	011a      	lsls	r2, r3, #4
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6959      	ldr	r1, [r3, #20]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	895a      	ldrh	r2, [r3, #10]
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f003 f968 	bl	8005eb8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c02:	823b      	strh	r3, [r7, #16]
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	f083 0310 	eor.w	r3, r3, #16
 8002c0a:	823b      	strh	r3, [r7, #16]
 8002c0c:	8a3b      	ldrh	r3, [r7, #16]
 8002c0e:	f083 0320 	eor.w	r3, r3, #32
 8002c12:	823b      	strh	r3, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	8a3b      	ldrh	r3, [r7, #16]
 8002c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3748      	adds	r7, #72	; 0x48
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	817b      	strh	r3, [r7, #10]
 8002c50:	4613      	mov	r3, r2
 8002c52:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c54:	897b      	ldrh	r3, [r7, #10]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	897b      	ldrh	r3, [r7, #10]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e009      	b.n	8002c8c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c78:	897a      	ldrh	r2, [r7, #10]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	80da      	strh	r2, [r3, #6]
 8002ca0:	e00b      	b.n	8002cba <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e26c      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8087 	beq.w	8002df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d00c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf4:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d112      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5e>
 8002d00:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d10b      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d06c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x12c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d168      	bne.n	8002df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e246      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x76>
 8002d30:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e02e      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x98>
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b78      	ldr	r3, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0xbc>
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a71      	ldr	r2, [pc, #452]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d84:	4b6b      	ldr	r3, [pc, #428]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe f960 	bl	8001068 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe f95c 	bl	8001068 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1fa      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xe4>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f94c 	bl	8001068 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe f948 	bl	8001068 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1e6      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x10c>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x18c>
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x176>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1ba      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4939      	ldr	r1, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe f901 	bl	8001068 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe f8fd 	bl	8001068 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e19b      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f8e0 	bl	8001068 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe f8dc 	bl	8001068 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e17a      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03a      	beq.n	8002f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f8c0 	bl	8001068 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe f8bc 	bl	8001068 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e15a      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f000 faa8 	bl	8003460 <RCC_Delay>
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7fe f8a6 	bl	8001068 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe f8a2 	bl	8001068 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d908      	bls.n	8002f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e140      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	42420000 	.word	0x42420000
 8002f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b9e      	ldr	r3, [pc, #632]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e9      	bne.n	8002f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a6 	beq.w	80030a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b97      	ldr	r3, [pc, #604]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b94      	ldr	r3, [pc, #592]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a93      	ldr	r2, [pc, #588]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]
 8002f76:	4b91      	ldr	r3, [pc, #580]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b8e      	ldr	r3, [pc, #568]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b8b      	ldr	r3, [pc, #556]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a8a      	ldr	r2, [pc, #552]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f863 	bl	8001068 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe f85f 	bl	8001068 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0fd      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x312>
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a7a      	ldr	r2, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x334>
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a72      	ldr	r2, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x356>
 8003004:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a6c      	ldr	r2, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a69      	ldr	r2, [pc, #420]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 800301e:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a66      	ldr	r2, [pc, #408]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	4b64      	ldr	r3, [pc, #400]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7fe f813 	bl	8001068 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe f80f 	bl	8001068 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0ab      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x37e>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fd fffd 	bl	8001068 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fd fff9 	bl	8001068 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e095      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b48      	ldr	r3, [pc, #288]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a47      	ldr	r2, [pc, #284]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8081 	beq.w	80031b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d061      	beq.n	8003180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d146      	bne.n	8003152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_OscConfig+0x4fc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fd ffcd 	bl	8001068 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fd ffc9 	bl	8001068 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e067      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	492d      	ldr	r1, [pc, #180]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a19      	ldr	r1, [r3, #32]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	430b      	orrs	r3, r1
 800311e:	4927      	ldr	r1, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x4fc>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fd ff9d 	bl	8001068 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fd ff99 	bl	8001068 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e037      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x46a>
 8003150:	e02f      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_RCC_OscConfig+0x4fc>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fd ff86 	bl	8001068 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd ff82 	bl	8001068 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e020      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x498>
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e013      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40007000 	.word	0x40007000
 80031c4:	42420060 	.word	0x42420060

080031c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d0      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4965      	ldr	r1, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800322e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d040      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d115      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e073      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fd fed6 	bl	8001068 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fd fed2 	bl	8001068 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e053      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d210      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4922      	ldr	r1, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4601      	mov	r1, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	fa21 f303 	lsr.w	r3, r1, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1cc>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fe34 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40022000 	.word	0x40022000
 800338c:	40021000 	.word	0x40021000
 8003390:	0800894c 	.word	0x0800894c
 8003394:	20000008 	.word	0x20000008
 8003398:	2000000c 	.word	0x2000000c

0800339c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b490      	push	{r4, r7}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033a2:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_RCC_GetSysClockFreq+0xb0>)
 80033a4:	1d3c      	adds	r4, r7, #4
 80033a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x40>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x46>
 80033da:	e02d      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033de:	623b      	str	r3, [r7, #32]
      break;
 80033e0:	e02d      	b.n	800343e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033ee:	4413      	add	r3, r2
 80033f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c5b      	lsrs	r3, r3, #17
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800340e:	4413      	add	r3, r2
 8003410:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003414:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_RCC_GetSysClockFreq+0xbc>)
 800341a:	fb02 f203 	mul.w	r2, r2, r3
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
 8003426:	e004      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a0c      	ldr	r2, [pc, #48]	; (800345c <HAL_RCC_GetSysClockFreq+0xc0>)
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	623b      	str	r3, [r7, #32]
      break;
 8003436:	e002      	b.n	800343e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCC_GetSysClockFreq+0xbc>)
 800343a:	623b      	str	r3, [r7, #32]
      break;
 800343c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343e:	6a3b      	ldr	r3, [r7, #32]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc90      	pop	{r4, r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	080088f0 	.word	0x080088f0
 8003450:	08008900 	.word	0x08008900
 8003454:	40021000 	.word	0x40021000
 8003458:	007a1200 	.word	0x007a1200
 800345c:	003d0900 	.word	0x003d0900

08003460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RCC_Delay+0x34>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <RCC_Delay+0x38>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0a5b      	lsrs	r3, r3, #9
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800347c:	bf00      	nop
  }
  while (Delay --);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	60fa      	str	r2, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f9      	bne.n	800347c <RCC_Delay+0x1c>
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000008 	.word	0x20000008
 8003498:	10624dd3 	.word	0x10624dd3

0800349c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d07d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d2:	61d3      	str	r3, [r2, #28]
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b46      	ldr	r3, [pc, #280]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d118      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a42      	ldr	r2, [pc, #264]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fc:	f7fd fdb4 	bl	8001068 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	e008      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003504:	f7fd fdb0 	bl	8001068 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e06d      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d02e      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	429a      	cmp	r2, r3
 800353e:	d027      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003550:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d014      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fd fd7f 	bl	8001068 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fd fd7b 	bl	8001068 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e036      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ee      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4917      	ldr	r1, [pc, #92]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	490b      	ldr	r1, [pc, #44]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4904      	ldr	r1, [pc, #16]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
 8003604:	42420440 	.word	0x42420440

08003608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e041      	b.n	800369e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fbc6 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f000 faae 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_TIM_Base_Start+0x88>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_TIM_Base_Start+0x48>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d009      	beq.n	80036f0 <HAL_TIM_Base_Start+0x48>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <HAL_TIM_Base_Start+0x8c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_TIM_Base_Start+0x48>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <HAL_TIM_Base_Start+0x90>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d111      	bne.n	8003714 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d010      	beq.n	8003724 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	e007      	b.n	8003724 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800

0800373c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e03a      	b.n	80037ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d009      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a13      	ldr	r2, [pc, #76]	; (80037dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d111      	bne.n	80037b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d010      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	e007      	b.n	80037c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800

080037e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0202 	mvn.w	r2, #2
 800380c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9a4 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f997 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f9a6 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0204 	mvn.w	r2, #4
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f97a 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f96d 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f97c 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0208 	mvn.w	r2, #8
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2204      	movs	r2, #4
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f950 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f943 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f952 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0210 	mvn.w	r2, #16
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2208      	movs	r2, #8
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f926 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f919 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f928 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10e      	bne.n	8003964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d107      	bne.n	8003964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0201 	mvn.w	r2, #1
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd f926 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b80      	cmp	r3, #128	; 0x80
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa6b 	bl	8003e66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8ec 	bl	8003b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d10e      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d107      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0220 	mvn.w	r2, #32
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa36 	bl	8003e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_TIM_ConfigClockSource+0x18>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e0a6      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x166>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d067      	beq.n	8003b10 <HAL_TIM_ConfigClockSource+0x120>
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d80b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x6c>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d073      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0x140>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d802      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x62>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d06f      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a50:	e078      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d06c      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0x140>
 8003a56:	2b30      	cmp	r3, #48	; 0x30
 8003a58:	d06a      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a5a:	e073      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a5c:	2b70      	cmp	r3, #112	; 0x70
 8003a5e:	d00d      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0x8c>
 8003a60:	2b70      	cmp	r3, #112	; 0x70
 8003a62:	d804      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x7e>
 8003a64:	2b50      	cmp	r3, #80	; 0x50
 8003a66:	d033      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0xe0>
 8003a68:	2b60      	cmp	r3, #96	; 0x60
 8003a6a:	d041      	beq.n	8003af0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a6c:	e06a      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a72:	d066      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x152>
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d017      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a7a:	e063      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f000 f965 	bl	8003d5a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e04c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f000 f94e 	bl	8003d5a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003acc:	609a      	str	r2, [r3, #8]
      break;
 8003ace:	e039      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f000 f8c5 	bl	8003c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2150      	movs	r1, #80	; 0x50
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f91c 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003aee:	e029      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f000 f8e3 	bl	8003cc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2160      	movs	r1, #96	; 0x60
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f90c 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003b0e:	e019      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f000 f8a5 	bl	8003c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f8fc 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003b2e:	e009      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 f8f3 	bl	8003d26 <TIM_ITRx_SetConfig>
        break;
 8003b40:	e000      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
	...

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a29      	ldr	r2, [pc, #164]	; (8003c60 <TIM_Base_SetConfig+0xb8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x30>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x30>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <TIM_Base_SetConfig+0xbc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x30>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <TIM_Base_SetConfig+0xc0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <TIM_Base_SetConfig+0xb8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_Base_SetConfig+0x62>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d007      	beq.n	8003c0a <TIM_Base_SetConfig+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_Base_SetConfig+0xbc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_Base_SetConfig+0x62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <TIM_Base_SetConfig+0xc0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <TIM_Base_SetConfig+0xb8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d103      	bne.n	8003c50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	615a      	str	r2, [r3, #20]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800

08003c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 030a 	bic.w	r3, r3, #10
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f023 0210 	bic.w	r2, r3, #16
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	031b      	lsls	r3, r3, #12
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f043 0307 	orr.w	r3, r3, #7
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b087      	sub	sp, #28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	609a      	str	r2, [r3, #8]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e046      	b.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10c      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800

08003e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e78:	b084      	sub	sp, #16
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	f107 0014 	add.w	r0, r7, #20
 8003e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	b004      	add	sp, #16
 8003e96:	4770      	bx	lr

08003e98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ea8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003eac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ecc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ed0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f10:	b084      	sub	sp, #16
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	f107 0014 	add.w	r0, r7, #20
 8003f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	b004      	add	sp, #16
 8003f4e:	4770      	bx	lr

08003f50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b09b      	sub	sp, #108	; 0x6c
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	78db      	ldrb	r3, [r3, #3]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d81f      	bhi.n	8003fc2 <USB_ActivateEndpoint+0x72>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <USB_ActivateEndpoint+0x38>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fcb 	.word	0x08003fcb
 8003f94:	08003fa7 	.word	0x08003fa7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fa4:	e012      	b.n	8003fcc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fa6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003faa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003fae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fb2:	e00b      	b.n	8003fcc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fc0:	e004      	b.n	8003fcc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003fc8:	e000      	b.n	8003fcc <USB_ActivateEndpoint+0x7c>
      break;
 8003fca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004004:	b29a      	uxth	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	4313      	orrs	r3, r2
 800400e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	7b1b      	ldrb	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8149 	bne.w	80042d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8084 	beq.w	8004150 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4413      	add	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	011a      	lsls	r2, r3, #4
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	88db      	ldrh	r3, [r3, #6]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	81fb      	strh	r3, [r7, #14]
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01b      	beq.n	80040cc <USB_ActivateEndpoint+0x17c>
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	81bb      	strh	r3, [r7, #12]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	89bb      	ldrh	r3, [r7, #12]
 80040b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d020      	beq.n	8004116 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ea:	813b      	strh	r3, [r7, #8]
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	f083 0320 	eor.w	r3, r3, #32
 80040f2:	813b      	strh	r3, [r7, #8]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	893b      	ldrh	r3, [r7, #8]
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
 8004114:	e27f      	b.n	8004616 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412c:	817b      	strh	r3, [r7, #10]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	897b      	ldrh	r3, [r7, #10]
 800413a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414a:	b29b      	uxth	r3, r3
 800414c:	8013      	strh	r3, [r2, #0]
 800414e:	e262      	b.n	8004616 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	4413      	add	r3, r2
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	011a      	lsls	r2, r3, #4
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	4413      	add	r3, r2
 800416e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	88db      	ldrh	r3, [r3, #6]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	4413      	add	r3, r2
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	011a      	lsls	r2, r3, #4
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	4413      	add	r3, r2
 80041a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d112      	bne.n	80041d6 <USB_ActivateEndpoint+0x286>
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	e02f      	b.n	8004236 <USB_ActivateEndpoint+0x2e6>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b3e      	cmp	r3, #62	; 0x3e
 80041dc:	d813      	bhi.n	8004206 <USB_ActivateEndpoint+0x2b6>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	663b      	str	r3, [r7, #96]	; 0x60
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <USB_ActivateEndpoint+0x2a8>
 80041f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f4:	3301      	adds	r3, #1
 80041f6:	663b      	str	r3, [r7, #96]	; 0x60
 80041f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	029b      	lsls	r3, r3, #10
 80041fe:	b29a      	uxth	r2, r3
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	e017      	b.n	8004236 <USB_ActivateEndpoint+0x2e6>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <USB_ActivateEndpoint+0x2d0>
 800421a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421c:	3b01      	subs	r3, #1
 800421e:	663b      	str	r3, [r7, #96]	; 0x60
 8004220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004222:	b29b      	uxth	r3, r3
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	b29b      	uxth	r3, r3
 8004228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004230:	b29a      	uxth	r2, r3
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	83fb      	strh	r3, [r7, #30]
 8004244:	8bfb      	ldrh	r3, [r7, #30]
 8004246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01b      	beq.n	8004286 <USB_ActivateEndpoint+0x336>
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	83bb      	strh	r3, [r7, #28]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	8bbb      	ldrh	r3, [r7, #28]
 8004272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429c:	837b      	strh	r3, [r7, #26]
 800429e:	8b7b      	ldrh	r3, [r7, #26]
 80042a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042a4:	837b      	strh	r3, [r7, #26]
 80042a6:	8b7b      	ldrh	r3, [r7, #26]
 80042a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042ac:	837b      	strh	r3, [r7, #26]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	441a      	add	r2, r3
 80042b8:	8b7b      	ldrh	r3, [r7, #26]
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]
 80042ce:	e1a2      	b.n	8004616 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	441a      	add	r2, r3
 80042f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80042f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004300:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004308:	b29b      	uxth	r3, r3
 800430a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431c:	4413      	add	r3, r2
 800431e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	011a      	lsls	r2, r3, #4
 8004326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004328:	4413      	add	r3, r2
 800432a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800432e:	657b      	str	r3, [r7, #84]	; 0x54
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	891b      	ldrh	r3, [r3, #8]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	653b      	str	r3, [r7, #80]	; 0x50
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004350:	4413      	add	r3, r2
 8004352:	653b      	str	r3, [r7, #80]	; 0x50
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435c:	4413      	add	r3, r2
 800435e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	895b      	ldrh	r3, [r3, #10]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004372:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 8091 	bne.w	80044a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800438c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01b      	beq.n	80043ce <USB_ActivateEndpoint+0x47e>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	873b      	strh	r3, [r7, #56]	; 0x38
 80043dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <USB_ActivateEndpoint+0x4ce>
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004434:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004436:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004438:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800443c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800443e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004444:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447c:	867b      	strh	r3, [r7, #50]	; 0x32
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
 800449e:	e0ba      	b.n	8004616 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01d      	beq.n	80044f8 <USB_ActivateEndpoint+0x5a8>
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004508:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01d      	beq.n	8004550 <USB_ActivateEndpoint+0x600>
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800453c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800454c:	b29b      	uxth	r3, r3
 800454e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	78db      	ldrb	r3, [r3, #3]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d024      	beq.n	80045a2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004576:	f083 0320 	eor.w	r3, r3, #32
 800457a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800458c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]
 80045a0:	e01d      	b.n	80045de <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004616:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800461a:	4618      	mov	r0, r3
 800461c:	376c      	adds	r7, #108	; 0x6c
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004624:	b480      	push	{r7}
 8004626:	b08d      	sub	sp, #52	; 0x34
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	7b1b      	ldrb	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f040 808e 	bne.w	8004754 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d044      	beq.n	80046ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	81bb      	strh	r3, [r7, #12]
 800464e:	89bb      	ldrh	r3, [r7, #12]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <USB_DeactivateEndpoint+0x6c>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	817b      	strh	r3, [r7, #10]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	897b      	ldrh	r3, [r7, #10]
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a6:	813b      	strh	r3, [r7, #8]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	893b      	ldrh	r3, [r7, #8]
 80046b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
 80046c8:	e192      	b.n	80049f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	827b      	strh	r3, [r7, #18]
 80046d8:	8a7b      	ldrh	r3, [r7, #18]
 80046da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01b      	beq.n	800471a <USB_DeactivateEndpoint+0xf6>
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	823b      	strh	r3, [r7, #16]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	8a3b      	ldrh	r3, [r7, #16]
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800472c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004730:	81fb      	strh	r3, [r7, #14]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]
 8004752:	e14d      	b.n	80049f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 80a5 	bne.w	80048a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	843b      	strh	r3, [r7, #32]
 800476c:	8c3b      	ldrh	r3, [r7, #32]
 800476e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01b      	beq.n	80047ae <USB_DeactivateEndpoint+0x18a>
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	83fb      	strh	r3, [r7, #30]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	8bfb      	ldrh	r3, [r7, #30]
 800479a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	83bb      	strh	r3, [r7, #28]
 80047bc:	8bbb      	ldrh	r3, [r7, #28]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01b      	beq.n	80047fe <USB_DeactivateEndpoint+0x1da>
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	837b      	strh	r3, [r7, #26]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	8b7b      	ldrh	r3, [r7, #26]
 80047ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	833b      	strh	r3, [r7, #24]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8b3b      	ldrh	r3, [r7, #24]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	82fb      	strh	r3, [r7, #22]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8afb      	ldrh	r3, [r7, #22]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	82bb      	strh	r3, [r7, #20]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8abb      	ldrh	r3, [r7, #20]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
 80048a6:	e0a3      	b.n	80049f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <USB_DeactivateEndpoint+0x2d4>
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004906:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <USB_DeactivateEndpoint+0x324>
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	853b      	strh	r3, [r7, #40]	; 0x28
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004996:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3734      	adds	r7, #52	; 0x34
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b0c4      	sub	sp, #272	; 0x110
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	6018      	str	r0, [r3, #0]
 8004a06:	463b      	mov	r3, r7
 8004a08:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 8557 	bne.w	80054c4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a16:	463b      	mov	r3, r7
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d905      	bls.n	8004a32 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004a26:	463b      	mov	r3, r7
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a30:	e004      	b.n	8004a3c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004a32:	463b      	mov	r3, r7
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d12c      	bne.n	8004aa0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a46:	463b      	mov	r3, r7
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6959      	ldr	r1, [r3, #20]
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	88da      	ldrh	r2, [r3, #6]
 8004a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	1d38      	adds	r0, r7, #4
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	f001 fa2c 	bl	8005eb8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4413      	add	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	463b      	mov	r3, r7
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	011a      	lsls	r2, r3, #4
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a88:	f107 0310 	add.w	r3, r7, #16
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	f107 0310 	add.w	r3, r7, #16
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	f000 bcdd 	b.w	800545a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	f040 8347 	bne.w	800513a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004aac:	463b      	mov	r3, r7
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	f240 82eb 	bls.w	8005094 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b02:	463b      	mov	r3, r7
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a1a      	ldr	r2, [r3, #32]
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	463b      	mov	r3, r7
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	463b      	mov	r3, r7
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8159 	beq.w	8004de2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	463b      	mov	r3, r7
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d164      	bne.n	8004c0a <USB_EPStartXfer+0x20e>
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	4413      	add	r3, r2
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b58:	463b      	mov	r3, r7
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	011a      	lsls	r2, r3, #4
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	4413      	add	r3, r2
 8004b64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d112      	bne.n	8004b98 <USB_EPStartXfer+0x19c>
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e054      	b.n	8004c42 <USB_EPStartXfer+0x246>
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8004b9e:	d817      	bhi.n	8004bd0 <USB_EPStartXfer+0x1d4>
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <USB_EPStartXfer+0x1c4>
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	029b      	lsls	r3, r3, #10
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	e038      	b.n	8004c42 <USB_EPStartXfer+0x246>
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <USB_EPStartXfer+0x1f4>
 8004be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	029b      	lsls	r3, r3, #10
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	e01b      	b.n	8004c42 <USB_EPStartXfer+0x246>
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d116      	bne.n	8004c42 <USB_EPStartXfer+0x246>
 8004c14:	1d3b      	adds	r3, r7, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	4413      	add	r3, r2
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
 8004c26:	463b      	mov	r3, r7
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	011a      	lsls	r2, r3, #4
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	4413      	add	r3, r2
 8004c32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
 8004c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	895b      	ldrh	r3, [r3, #10]
 8004c48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6959      	ldr	r1, [r3, #20]
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004c5c:	1d38      	adds	r0, r7, #4
 8004c5e:	6800      	ldr	r0, [r0, #0]
 8004c60:	f001 f92a 	bl	8005eb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6e:	441a      	add	r2, r3
 8004c70:	463b      	mov	r3, r7
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c76:	463b      	mov	r3, r7
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a1a      	ldr	r2, [r3, #32]
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d909      	bls.n	8004c9a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004c86:	463b      	mov	r3, r7
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c90:	1ad2      	subs	r2, r2, r3
 8004c92:	463b      	mov	r3, r7
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	621a      	str	r2, [r3, #32]
 8004c98:	e008      	b.n	8004cac <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cac:	463b      	mov	r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d164      	bne.n	8004d80 <USB_EPStartXfer+0x384>
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	1d3b      	adds	r3, r7, #4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	463b      	mov	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	011a      	lsls	r2, r3, #4
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d112      	bne.n	8004d0e <USB_EPStartXfer+0x312>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e057      	b.n	8004dbe <USB_EPStartXfer+0x3c2>
 8004d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d12:	2b3e      	cmp	r3, #62	; 0x3e
 8004d14:	d817      	bhi.n	8004d46 <USB_EPStartXfer+0x34a>
 8004d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <USB_EPStartXfer+0x33a>
 8004d2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d30:	3301      	adds	r3, #1
 8004d32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	e03b      	b.n	8004dbe <USB_EPStartXfer+0x3c2>
 8004d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <USB_EPStartXfer+0x36a>
 8004d5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	029b      	lsls	r3, r3, #10
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	e01e      	b.n	8004dbe <USB_EPStartXfer+0x3c2>
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d119      	bne.n	8004dbe <USB_EPStartXfer+0x3c2>
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	4413      	add	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	463b      	mov	r3, r7
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	011a      	lsls	r2, r3, #4
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	4413      	add	r3, r2
 8004dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	891b      	ldrh	r3, [r3, #8]
 8004dc4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dc8:	463b      	mov	r3, r7
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6959      	ldr	r1, [r3, #20]
 8004dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004dd8:	1d38      	adds	r0, r7, #4
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	f001 f86c 	bl	8005eb8 <USB_WritePMA>
 8004de0:	e33b      	b.n	800545a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d164      	bne.n	8004eb6 <USB_EPStartXfer+0x4ba>
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	4413      	add	r3, r2
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	011a      	lsls	r2, r3, #4
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	4413      	add	r3, r2
 8004e10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d112      	bne.n	8004e44 <USB_EPStartXfer+0x448>
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e057      	b.n	8004ef4 <USB_EPStartXfer+0x4f8>
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e48:	2b3e      	cmp	r3, #62	; 0x3e
 8004e4a:	d817      	bhi.n	8004e7c <USB_EPStartXfer+0x480>
 8004e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <USB_EPStartXfer+0x470>
 8004e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e66:	3301      	adds	r3, #1
 8004e68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	e03b      	b.n	8004ef4 <USB_EPStartXfer+0x4f8>
 8004e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <USB_EPStartXfer+0x4a0>
 8004e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e96:	3b01      	subs	r3, #1
 8004e98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	029b      	lsls	r3, r3, #10
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	e01e      	b.n	8004ef4 <USB_EPStartXfer+0x4f8>
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d119      	bne.n	8004ef4 <USB_EPStartXfer+0x4f8>
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed4:	4413      	add	r3, r2
 8004ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed8:	463b      	mov	r3, r7
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	011a      	lsls	r2, r3, #4
 8004ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8004eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	891b      	ldrh	r3, [r3, #8]
 8004efa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f0e:	1d38      	adds	r0, r7, #4
 8004f10:	6800      	ldr	r0, [r0, #0]
 8004f12:	f000 ffd1 	bl	8005eb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	441a      	add	r2, r3
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d909      	bls.n	8004f4c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	621a      	str	r2, [r3, #32]
 8004f4a:	e008      	b.n	8004f5e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	647b      	str	r3, [r7, #68]	; 0x44
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d164      	bne.n	8005038 <USB_EPStartXfer+0x63c>
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f82:	4413      	add	r3, r2
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	4413      	add	r3, r2
 8004f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d112      	bne.n	8004fc6 <USB_EPStartXfer+0x5ca>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e054      	b.n	8005070 <USB_EPStartXfer+0x674>
 8004fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fca:	2b3e      	cmp	r3, #62	; 0x3e
 8004fcc:	d817      	bhi.n	8004ffe <USB_EPStartXfer+0x602>
 8004fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <USB_EPStartXfer+0x5f2>
 8004fe4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	e038      	b.n	8005070 <USB_EPStartXfer+0x674>
 8004ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <USB_EPStartXfer+0x622>
 8005014:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005018:	3b01      	subs	r3, #1
 800501a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800501e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005022:	b29b      	uxth	r3, r3
 8005024:	029b      	lsls	r3, r3, #10
 8005026:	b29b      	uxth	r3, r3
 8005028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005030:	b29a      	uxth	r2, r3
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	e01b      	b.n	8005070 <USB_EPStartXfer+0x674>
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d116      	bne.n	8005070 <USB_EPStartXfer+0x674>
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005050:	4413      	add	r3, r2
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	463b      	mov	r3, r7
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	011a      	lsls	r2, r3, #4
 800505c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505e:	4413      	add	r3, r2
 8005060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
 8005066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506a:	b29a      	uxth	r2, r3
 800506c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	895b      	ldrh	r3, [r3, #10]
 8005076:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6959      	ldr	r1, [r3, #20]
 8005080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005084:	b29b      	uxth	r3, r3
 8005086:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800508a:	1d38      	adds	r0, r7, #4
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f000 ff13 	bl	8005eb8 <USB_WritePMA>
 8005092:	e1e2      	b.n	800545a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800509e:	1d3b      	adds	r3, r7, #4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050e2:	1d3b      	adds	r3, r7, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	663b      	str	r3, [r7, #96]	; 0x60
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f6:	4413      	add	r3, r2
 80050f8:	663b      	str	r3, [r7, #96]	; 0x60
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	011a      	lsls	r2, r3, #4
 8005102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005104:	4413      	add	r3, r2
 8005106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800510a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005110:	b29a      	uxth	r2, r3
 8005112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005114:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005116:	463b      	mov	r3, r7
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	891b      	ldrh	r3, [r3, #8]
 800511c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6959      	ldr	r1, [r3, #20]
 8005126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800512a:	b29b      	uxth	r3, r3
 800512c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005130:	1d38      	adds	r0, r7, #4
 8005132:	6800      	ldr	r0, [r0, #0]
 8005134:	f000 fec0 	bl	8005eb8 <USB_WritePMA>
 8005138:	e18f      	b.n	800545a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 808f 	beq.w	8005274 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	67bb      	str	r3, [r7, #120]	; 0x78
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d164      	bne.n	8005230 <USB_EPStartXfer+0x834>
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	673b      	str	r3, [r7, #112]	; 0x70
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005174:	b29b      	uxth	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800517a:	4413      	add	r3, r2
 800517c:	673b      	str	r3, [r7, #112]	; 0x70
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	011a      	lsls	r2, r3, #4
 8005186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005188:	4413      	add	r3, r2
 800518a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800518e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d112      	bne.n	80051be <USB_EPStartXfer+0x7c2>
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e054      	b.n	8005268 <USB_EPStartXfer+0x86c>
 80051be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c2:	2b3e      	cmp	r3, #62	; 0x3e
 80051c4:	d817      	bhi.n	80051f6 <USB_EPStartXfer+0x7fa>
 80051c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <USB_EPStartXfer+0x7ea>
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	3301      	adds	r3, #1
 80051e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e038      	b.n	8005268 <USB_EPStartXfer+0x86c>
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <USB_EPStartXfer+0x81a>
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	3b01      	subs	r3, #1
 8005212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521a:	b29b      	uxth	r3, r3
 800521c:	029b      	lsls	r3, r3, #10
 800521e:	b29b      	uxth	r3, r3
 8005220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005228:	b29a      	uxth	r2, r3
 800522a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e01b      	b.n	8005268 <USB_EPStartXfer+0x86c>
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d116      	bne.n	8005268 <USB_EPStartXfer+0x86c>
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005248:	4413      	add	r3, r2
 800524a:	67bb      	str	r3, [r7, #120]	; 0x78
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	011a      	lsls	r2, r3, #4
 8005254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005256:	4413      	add	r3, r2
 8005258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525c:	677b      	str	r3, [r7, #116]	; 0x74
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005262:	b29a      	uxth	r2, r3
 8005264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005266:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	895b      	ldrh	r3, [r3, #10]
 800526e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005272:	e097      	b.n	80053a4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005274:	463b      	mov	r3, r7
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d168      	bne.n	8005350 <USB_EPStartXfer+0x954>
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528e:	b29b      	uxth	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005296:	4413      	add	r3, r2
 8005298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d112      	bne.n	80052de <USB_EPStartXfer+0x8e2>
 80052b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e05d      	b.n	800539a <USB_EPStartXfer+0x99e>
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e2:	2b3e      	cmp	r3, #62	; 0x3e
 80052e4:	d817      	bhi.n	8005316 <USB_EPStartXfer+0x91a>
 80052e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <USB_EPStartXfer+0x90a>
 80052fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005300:	3301      	adds	r3, #1
 8005302:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005306:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800530a:	b29b      	uxth	r3, r3
 800530c:	029b      	lsls	r3, r3, #10
 800530e:	b29a      	uxth	r2, r3
 8005310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e041      	b.n	800539a <USB_EPStartXfer+0x99e>
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <USB_EPStartXfer+0x93a>
 800532c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005330:	3b01      	subs	r3, #1
 8005332:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800533a:	b29b      	uxth	r3, r3
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	b29b      	uxth	r3, r3
 8005340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005348:	b29a      	uxth	r2, r3
 800534a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e024      	b.n	800539a <USB_EPStartXfer+0x99e>
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d11f      	bne.n	800539a <USB_EPStartXfer+0x99e>
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005362:	1d3b      	adds	r3, r7, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536a:	b29b      	uxth	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005372:	4413      	add	r3, r2
 8005374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011a      	lsls	r2, r3, #4
 8005380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005384:	4413      	add	r3, r2
 8005386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800538a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005392:	b29a      	uxth	r2, r3
 8005394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005398:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800539a:	463b      	mov	r3, r7
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	891b      	ldrh	r3, [r3, #8]
 80053a0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a4:	463b      	mov	r3, r7
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6959      	ldr	r1, [r3, #20]
 80053aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053b4:	1d38      	adds	r0, r7, #4
 80053b6:	6800      	ldr	r0, [r0, #0]
 80053b8:	f000 fd7e 	bl	8005eb8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80053bc:	463b      	mov	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d122      	bne.n	800540c <USB_EPStartXfer+0xa10>
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	463b      	mov	r3, r7
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]
 800540a:	e026      	b.n	800545a <USB_EPStartXfer+0xa5e>
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d121      	bne.n	800545a <USB_EPStartXfer+0xa5e>
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800545a:	1d3b      	adds	r3, r7, #4
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f107 020e 	add.w	r2, r7, #14
 8005470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005478:	8013      	strh	r3, [r2, #0]
 800547a:	f107 030e 	add.w	r3, r7, #14
 800547e:	f107 020e 	add.w	r2, r7, #14
 8005482:	8812      	ldrh	r2, [r2, #0]
 8005484:	f082 0210 	eor.w	r2, r2, #16
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	f107 030e 	add.w	r3, r7, #14
 800548e:	f107 020e 	add.w	r2, r7, #14
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	f082 0220 	eor.w	r2, r2, #32
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	463b      	mov	r3, r7
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	f107 030e 	add.w	r3, r7, #14
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054be:	b29b      	uxth	r3, r3
 80054c0:	8013      	strh	r3, [r2, #0]
 80054c2:	e3b5      	b.n	8005c30 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	7b1b      	ldrb	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 8090 	bne.w	80055f0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d90e      	bls.n	80054fe <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80054ea:	463b      	mov	r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f4:	1ad2      	subs	r2, r2, r3
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	619a      	str	r2, [r3, #24]
 80054fc:	e008      	b.n	8005510 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80054fe:	463b      	mov	r3, r7
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005528:	4413      	add	r3, r2
 800552a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800552e:	463b      	mov	r3, r7
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800553a:	4413      	add	r3, r2
 800553c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d116      	bne.n	800557a <USB_EPStartXfer+0xb7e>
 800554c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005558:	b29a      	uxth	r2, r3
 800555a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	e32c      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557e:	2b3e      	cmp	r3, #62	; 0x3e
 8005580:	d818      	bhi.n	80055b4 <USB_EPStartXfer+0xbb8>
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800558c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <USB_EPStartXfer+0xba6>
 8005598:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800559c:	3301      	adds	r3, #1
 800559e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e30f      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
 80055b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <USB_EPStartXfer+0xbd8>
 80055ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055ce:	3b01      	subs	r3, #1
 80055d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29b      	uxth	r3, r3
 80055de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	e2f1      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055f0:	463b      	mov	r3, r7
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	f040 818f 	bne.w	800591a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d175      	bne.n	80056f2 <USB_EPStartXfer+0xcf6>
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800561e:	4413      	add	r3, r2
 8005620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	011a      	lsls	r2, r3, #4
 800562c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005630:	4413      	add	r3, r2
 8005632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d116      	bne.n	8005672 <USB_EPStartXfer+0xc76>
 8005644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e065      	b.n	800573e <USB_EPStartXfer+0xd42>
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b3e      	cmp	r3, #62	; 0x3e
 800567a:	d81a      	bhi.n	80056b2 <USB_EPStartXfer+0xcb6>
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <USB_EPStartXfer+0xca4>
 8005696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800569a:	3301      	adds	r3, #1
 800569c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e045      	b.n	800573e <USB_EPStartXfer+0xd42>
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <USB_EPStartXfer+0xcda>
 80056cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056d0:	3b01      	subs	r3, #1
 80056d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29b      	uxth	r3, r3
 80056e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	e025      	b.n	800573e <USB_EPStartXfer+0xd42>
 80056f2:	463b      	mov	r3, r7
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d120      	bne.n	800573e <USB_EPStartXfer+0xd42>
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005704:	1d3b      	adds	r3, r7, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570c:	b29b      	uxth	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005714:	4413      	add	r3, r2
 8005716:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	011a      	lsls	r2, r3, #4
 8005722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005726:	4413      	add	r3, r2
 8005728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005746:	463b      	mov	r3, r7
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d175      	bne.n	800583c <USB_EPStartXfer+0xe40>
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005768:	4413      	add	r3, r2
 800576a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800576e:	463b      	mov	r3, r7
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	011a      	lsls	r2, r3, #4
 8005776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800577a:	4413      	add	r3, r2
 800577c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d116      	bne.n	80057bc <USB_EPStartXfer+0xdc0>
 800578e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579a:	b29a      	uxth	r2, r3
 800579c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e061      	b.n	8005880 <USB_EPStartXfer+0xe84>
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b3e      	cmp	r3, #62	; 0x3e
 80057c4:	d81a      	bhi.n	80057fc <USB_EPStartXfer+0xe00>
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <USB_EPStartXfer+0xdee>
 80057e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e4:	3301      	adds	r3, #1
 80057e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e041      	b.n	8005880 <USB_EPStartXfer+0xe84>
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <USB_EPStartXfer+0xe24>
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	3b01      	subs	r3, #1
 800581c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29b      	uxth	r3, r3
 800582a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e021      	b.n	8005880 <USB_EPStartXfer+0xe84>
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d11c      	bne.n	8005880 <USB_EPStartXfer+0xe84>
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584e:	b29b      	uxth	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005856:	4413      	add	r3, r2
 8005858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	011a      	lsls	r2, r3, #4
 8005864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005868:	4413      	add	r3, r2
 800586a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800586e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005872:	463b      	mov	r3, r7
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	b29a      	uxth	r2, r3
 800587a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800587e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 81a4 	beq.w	8005bd4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800588c:	1d3b      	adds	r3, r7, #4
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	463b      	mov	r3, r7
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80058a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <USB_EPStartXfer+0xebc>
 80058ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80058bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8187 	bne.w	8005bd4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 8180 	bne.w	8005bd4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80058f2:	1d3b      	adds	r3, r7, #4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	441a      	add	r2, r3
 8005900:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005910:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005914:	b29b      	uxth	r3, r3
 8005916:	8013      	strh	r3, [r2, #0]
 8005918:	e15c      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	2b01      	cmp	r3, #1
 8005922:	f040 8155 	bne.w	8005bd0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005926:	463b      	mov	r3, r7
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d90e      	bls.n	8005954 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	463b      	mov	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	619a      	str	r2, [r3, #24]
 8005952:	e008      	b.n	8005966 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d16f      	bne.n	8005a50 <USB_EPStartXfer+0x1054>
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005978:	1d3b      	adds	r3, r7, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005980:	b29b      	uxth	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005988:	4413      	add	r3, r2
 800598a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800599a:	4413      	add	r3, r2
 800599c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <USB_EPStartXfer+0xfde>
 80059ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	e05f      	b.n	8005a9a <USB_EPStartXfer+0x109e>
 80059da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059de:	2b3e      	cmp	r3, #62	; 0x3e
 80059e0:	d818      	bhi.n	8005a14 <USB_EPStartXfer+0x1018>
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <USB_EPStartXfer+0x1006>
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fc:	3301      	adds	r3, #1
 80059fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	e042      	b.n	8005a9a <USB_EPStartXfer+0x109e>
 8005a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <USB_EPStartXfer+0x1038>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	029b      	lsls	r3, r3, #10
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e024      	b.n	8005a9a <USB_EPStartXfer+0x109e>
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d11f      	bne.n	8005a9a <USB_EPStartXfer+0x109e>
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a72:	4413      	add	r3, r2
 8005a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	011a      	lsls	r2, r3, #4
 8005a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d16f      	bne.n	8005b8c <USB_EPStartXfer+0x1190>
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	011a      	lsls	r2, r3, #4
 8005ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d116      	bne.n	8005b16 <USB_EPStartXfer+0x111a>
 8005ae8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e05e      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
 8005b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b1c:	d818      	bhi.n	8005b50 <USB_EPStartXfer+0x1154>
 8005b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <USB_EPStartXfer+0x1142>
 8005b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e041      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <USB_EPStartXfer+0x1174>
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e023      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d11e      	bne.n	8005bd4 <USB_EPStartXfer+0x11d8>
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	011a      	lsls	r2, r3, #4
 8005bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e001      	b.n	8005bd4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e02e      	b.n	8005c32 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005bf2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005bf6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bfa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005bfe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d020      	beq.n	8005c90 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	81bb      	strh	r3, [r7, #12]
 8005c66:	89bb      	ldrh	r3, [r7, #12]
 8005c68:	f083 0310 	eor.w	r3, r3, #16
 8005c6c:	81bb      	strh	r3, [r7, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	89bb      	ldrh	r3, [r7, #12]
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]
 8005c8e:	e01f      	b.n	8005cd0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	81fb      	strh	r3, [r7, #14]
 8005ca8:	89fb      	ldrh	r3, [r7, #14]
 8005caa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cae:	81fb      	strh	r3, [r7, #14]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	89fb      	ldrh	r3, [r7, #14]
 8005cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	7b1b      	ldrb	r3, [r3, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 809d 	bne.w	8005e2a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d04c      	beq.n	8005d92 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	823b      	strh	r3, [r7, #16]
 8005d06:	8a3b      	ldrh	r3, [r7, #16]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <USB_EPClearStall+0x6c>
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	81fb      	strh	r3, [r7, #14]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	89fb      	ldrh	r3, [r7, #14]
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d06c      	beq.n	8005e2a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d66:	81bb      	strh	r3, [r7, #12]
 8005d68:	89bb      	ldrh	r3, [r7, #12]
 8005d6a:	f083 0320 	eor.w	r3, r3, #32
 8005d6e:	81bb      	strh	r3, [r7, #12]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	89bb      	ldrh	r3, [r7, #12]
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]
 8005d90:	e04b      	b.n	8005e2a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	82fb      	strh	r3, [r7, #22]
 8005da0:	8afb      	ldrh	r3, [r7, #22]
 8005da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01b      	beq.n	8005de2 <USB_EPClearStall+0x106>
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	82bb      	strh	r3, [r7, #20]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8abb      	ldrh	r3, [r7, #20]
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	827b      	strh	r3, [r7, #18]
 8005dfa:	8a7b      	ldrh	r3, [r7, #18]
 8005dfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e00:	827b      	strh	r3, [r7, #18]
 8005e02:	8a7b      	ldrh	r3, [r7, #18]
 8005e04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e08:	827b      	strh	r3, [r7, #18]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	8a7b      	ldrh	r3, [r7, #18]
 8005e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b08d      	sub	sp, #52	; 0x34
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	80fb      	strh	r3, [r7, #6]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ece:	88bb      	ldrh	r3, [r7, #4]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	005a      	lsls	r2, r3, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef0:	e01e      	b.n	8005f30 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	3301      	adds	r3, #1
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	3302      	adds	r3, #2
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	3301      	adds	r3, #1
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1dd      	bne.n	8005ef2 <USB_WritePMA+0x3a>
  }
}
 8005f36:	bf00      	nop
 8005f38:	3734      	adds	r7, #52	; 0x34
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr

08005f40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b08b      	sub	sp, #44	; 0x2c
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	460b      	mov	r3, r1
 8005f50:	80fb      	strh	r3, [r7, #6]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f56:	88bb      	ldrh	r3, [r7, #4]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	005a      	lsls	r2, r3, #1
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
 8005f78:	e01b      	b.n	8005fb2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	3302      	adds	r3, #2
 8005f86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e0      	bne.n	8005f7a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005fb8:	88bb      	ldrh	r3, [r7, #4]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	701a      	strb	r2, [r3, #0]
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	372c      	adds	r7, #44	; 0x2c
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7c1b      	ldrb	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d115      	bne.n	8006022 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	2181      	movs	r1, #129	; 0x81
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fe79 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800600a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800600e:	2202      	movs	r2, #2
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 fe6f 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006020:	e012      	b.n	8006048 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006022:	2340      	movs	r3, #64	; 0x40
 8006024:	2202      	movs	r2, #2
 8006026:	2181      	movs	r1, #129	; 0x81
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 fe64 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	2202      	movs	r2, #2
 8006038:	2101      	movs	r1, #1
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fe5b 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006048:	2308      	movs	r3, #8
 800604a:	2203      	movs	r2, #3
 800604c:	2182      	movs	r1, #130	; 0x82
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fe51 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800605a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800605e:	f001 ff71 	bl	8007f44 <USBD_static_malloc>
 8006062:	4602      	mov	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e026      	b.n	80060c8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006080:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7c1b      	ldrb	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ae:	2101      	movs	r1, #1
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 ff11 	bl	8007ed8 <USBD_LL_PrepareReceive>
 80060b6:	e007      	b.n	80060c8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060be:	2340      	movs	r3, #64	; 0x40
 80060c0:	2101      	movs	r1, #1
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 ff08 	bl	8007ed8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060e2:	2181      	movs	r1, #129	; 0x81
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fe2c 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060f0:	2101      	movs	r1, #1
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fe25 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006100:	2182      	movs	r1, #130	; 0x82
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fe1d 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00e      	beq.n	8006136 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	4618      	mov	r0, r3
 800612a:	f001 ff17 	bl	8007f5c <USBD_static_free>
    pdev->pClassData = NULL;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006150:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006166:	2b00      	cmp	r3, #0
 8006168:	d039      	beq.n	80061de <USBD_CDC_Setup+0x9e>
 800616a:	2b20      	cmp	r3, #32
 800616c:	d17c      	bne.n	8006268 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	88db      	ldrh	r3, [r3, #6]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d029      	beq.n	80061ca <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b25b      	sxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	da11      	bge.n	80061a4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800618c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	88d2      	ldrh	r2, [r2, #6]
 8006192:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006194:	6939      	ldr	r1, [r7, #16]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	88db      	ldrh	r3, [r3, #6]
 800619a:	461a      	mov	r2, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f9f9 	bl	8007594 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80061a2:	e068      	b.n	8006276 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785a      	ldrb	r2, [r3, #1]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	88db      	ldrh	r3, [r3, #6]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061ba:	6939      	ldr	r1, [r7, #16]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	88db      	ldrh	r3, [r3, #6]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fa14 	bl	80075f0 <USBD_CtlPrepareRx>
      break;
 80061c8:	e055      	b.n	8006276 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	7850      	ldrb	r0, [r2, #1]
 80061d6:	2200      	movs	r2, #0
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	4798      	blx	r3
      break;
 80061dc:	e04b      	b.n	8006276 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b0a      	cmp	r3, #10
 80061e4:	d017      	beq.n	8006216 <USBD_CDC_Setup+0xd6>
 80061e6:	2b0b      	cmp	r3, #11
 80061e8:	d029      	beq.n	800623e <USBD_CDC_Setup+0xfe>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d133      	bne.n	8006256 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d107      	bne.n	8006208 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	2202      	movs	r2, #2
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 f9c7 	bl	8007594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006206:	e02e      	b.n	8006266 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f958 	bl	80074c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006210:	2302      	movs	r3, #2
 8006212:	75fb      	strb	r3, [r7, #23]
          break;
 8006214:	e027      	b.n	8006266 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621c:	2b03      	cmp	r3, #3
 800621e:	d107      	bne.n	8006230 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006220:	f107 030f 	add.w	r3, r7, #15
 8006224:	2201      	movs	r2, #1
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f9b3 	bl	8007594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800622e:	e01a      	b.n	8006266 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 f944 	bl	80074c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006238:	2302      	movs	r3, #2
 800623a:	75fb      	strb	r3, [r7, #23]
          break;
 800623c:	e013      	b.n	8006266 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006244:	2b03      	cmp	r3, #3
 8006246:	d00d      	beq.n	8006264 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 f938 	bl	80074c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006250:	2302      	movs	r3, #2
 8006252:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006254:	e006      	b.n	8006264 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 f931 	bl	80074c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800625e:	2302      	movs	r3, #2
 8006260:	75fb      	strb	r3, [r7, #23]
          break;
 8006262:	e000      	b.n	8006266 <USBD_CDC_Setup+0x126>
          break;
 8006264:	bf00      	nop
      }
      break;
 8006266:	e006      	b.n	8006276 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 f928 	bl	80074c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006270:	2302      	movs	r3, #2
 8006272:	75fb      	strb	r3, [r7, #23]
      break;
 8006274:	bf00      	nop
  }

  return ret;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800629a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d03a      	beq.n	800631c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	331c      	adds	r3, #28
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d029      	beq.n	8006310 <USBD_CDC_DataIn+0x90>
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	331c      	adds	r3, #28
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	78f9      	ldrb	r1, [r7, #3]
 80062d0:	68b8      	ldr	r0, [r7, #8]
 80062d2:	460b      	mov	r3, r1
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4403      	add	r3, r0
 80062dc:	3338      	adds	r3, #56	; 0x38
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80062e4:	fb03 f301 	mul.w	r3, r3, r1
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d110      	bne.n	8006310 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	331c      	adds	r3, #28
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006302:	78f9      	ldrb	r1, [r7, #3]
 8006304:	2300      	movs	r3, #0
 8006306:	2200      	movs	r2, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fdc2 	bl	8007e92 <USBD_LL_Transmit>
 800630e:	e003      	b.n	8006318 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fded 	bl	8007f1e <USBD_LL_GetRxDataSize>
 8006344:	4602      	mov	r2, r0
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800636a:	4611      	mov	r1, r2
 800636c:	4798      	blx	r3

    return USBD_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006372:	2302      	movs	r3, #2
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006392:	2b00      	cmp	r3, #0
 8006394:	d015      	beq.n	80063c2 <USBD_CDC_EP0_RxReady+0x46>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800639c:	2bff      	cmp	r3, #255	; 0xff
 800639e:	d010      	beq.n	80063c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80063ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063b6:	b292      	uxth	r2, r2
 80063b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	22ff      	movs	r2, #255	; 0xff
 80063be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2243      	movs	r2, #67	; 0x43
 80063d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80063da:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	2000009c 	.word	0x2000009c

080063ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2243      	movs	r2, #67	; 0x43
 80063f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80063fa:	4b03      	ldr	r3, [pc, #12]	; (8006408 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000058 	.word	0x20000058

0800640c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2243      	movs	r2, #67	; 0x43
 8006418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800641a:	4b03      	ldr	r3, [pc, #12]	; (8006428 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	200000e0 	.word	0x200000e0

0800642c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	220a      	movs	r2, #10
 8006438:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800643a:	4b03      	ldr	r3, [pc, #12]	; (8006448 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20000014 	.word	0x20000014

0800644c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006456:	2302      	movs	r3, #2
 8006458:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01c      	beq.n	8006524 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d115      	bne.n	8006520 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006512:	b29b      	uxth	r3, r3
 8006514:	2181      	movs	r1, #129	; 0x81
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fcbb 	bl	8007e92 <USBD_LL_Transmit>

      return USBD_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e002      	b.n	8006526 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d017      	beq.n	8006578 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7c1b      	ldrb	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655a:	2101      	movs	r1, #1
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fcbb 	bl	8007ed8 <USBD_LL_PrepareReceive>
 8006562:	e007      	b.n	8006574 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800656a:	2340      	movs	r3, #64	; 0x40
 800656c:	2101      	movs	r1, #1
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 fcb2 	bl	8007ed8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	e000      	b.n	800657a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006596:	2302      	movs	r3, #2
 8006598:	e01a      	b.n	80065d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	79fa      	ldrb	r2, [r7, #7]
 80065c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f001 fb1f 	bl	8007c0c <USBD_LL_Init>

  return USBD_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e001      	b.n	80065fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fb54 	bl	8007cc0 <USBD_LL_Start>

  return USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006642:	2302      	movs	r3, #2
 8006644:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	4611      	mov	r1, r2
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	78fa      	ldrb	r2, [r7, #3]
 800668a:	4611      	mov	r1, r2
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3

  return USBD_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fecb 	bl	8007448 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d00c      	beq.n	80066f0 <USBD_LL_SetupStage+0x56>
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d302      	bcc.n	80066e0 <USBD_LL_SetupStage+0x46>
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d010      	beq.n	8006700 <USBD_LL_SetupStage+0x66>
 80066de:	e017      	b.n	8006710 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f9cb 	bl	8006a84 <USBD_StdDevReq>
      break;
 80066ee:	e01a      	b.n	8006726 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fa2d 	bl	8006b58 <USBD_StdItfReq>
      break;
 80066fe:	e012      	b.n	8006726 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fa6b 	bl	8006be4 <USBD_StdEPReq>
      break;
 800670e:	e00a      	b.n	8006726 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800671a:	b2db      	uxtb	r3, r3
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 fb2e 	bl	8007d80 <USBD_LL_StallEP>
      break;
 8006724:	bf00      	nop
  }

  return USBD_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	460b      	mov	r3, r1
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d14b      	bne.n	80067dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800674a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006752:	2b03      	cmp	r3, #3
 8006754:	d134      	bne.n	80067c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d919      	bls.n	8006796 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006778:	429a      	cmp	r2, r3
 800677a:	d203      	bcs.n	8006784 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006780:	b29b      	uxth	r3, r3
 8006782:	e002      	b.n	800678a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 ff4c 	bl	800762c <USBD_CtlContinueRx>
 8006794:	e038      	b.n	8006808 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d105      	bne.n	80067b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 ff49 	bl	8007650 <USBD_CtlSendStatus>
 80067be:	e023      	b.n	8006808 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067c6:	2b05      	cmp	r3, #5
 80067c8:	d11e      	bne.n	8006808 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80067d2:	2100      	movs	r1, #0
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f001 fad3 	bl	8007d80 <USBD_LL_StallEP>
 80067da:	e015      	b.n	8006808 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d108      	bne.n	8006804 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	7afa      	ldrb	r2, [r7, #11]
 80067fc:	4611      	mov	r1, r2
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	4798      	blx	r3
 8006802:	e001      	b.n	8006808 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006804:	2302      	movs	r3, #2
 8006806:	e000      	b.n	800680a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	460b      	mov	r3, r1
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d17f      	bne.n	8006926 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3314      	adds	r3, #20
 800682a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006832:	2b02      	cmp	r3, #2
 8006834:	d15c      	bne.n	80068f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d915      	bls.n	800686e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	1ad2      	subs	r2, r2, r3
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	b29b      	uxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 feb6 	bl	80075cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006860:	2300      	movs	r3, #0
 8006862:	2200      	movs	r2, #0
 8006864:	2100      	movs	r1, #0
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f001 fb36 	bl	8007ed8 <USBD_LL_PrepareReceive>
 800686c:	e04e      	b.n	800690c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	6912      	ldr	r2, [r2, #16]
 8006876:	fbb3 f1f2 	udiv	r1, r3, r2
 800687a:	fb02 f201 	mul.w	r2, r2, r1
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11c      	bne.n	80068be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800688c:	429a      	cmp	r2, r3
 800688e:	d316      	bcc.n	80068be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800689a:	429a      	cmp	r2, r3
 800689c:	d20f      	bcs.n	80068be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800689e:	2200      	movs	r2, #0
 80068a0:	2100      	movs	r1, #0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fe92 	bl	80075cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068b0:	2300      	movs	r3, #0
 80068b2:	2200      	movs	r2, #0
 80068b4:	2100      	movs	r1, #0
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f001 fb0e 	bl	8007ed8 <USBD_LL_PrepareReceive>
 80068bc:	e026      	b.n	800690c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d105      	bne.n	80068e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f001 fa4c 	bl	8007d80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fec4 	bl	8007676 <USBD_CtlReceiveStatus>
 80068ee:	e00d      	b.n	800690c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d004      	beq.n	8006904 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f001 fa3a 	bl	8007d80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d11d      	bne.n	8006952 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fe83 	bl	8006622 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006924:	e015      	b.n	8006952 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00d      	beq.n	800694e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006938:	2b03      	cmp	r3, #3
 800693a:	d108      	bne.n	800694e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	7afa      	ldrb	r2, [r7, #11]
 8006946:	4611      	mov	r1, r2
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	4798      	blx	r3
 800694c:	e001      	b.n	8006952 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800694e:	2302      	movs	r3, #2
 8006950:	e000      	b.n	8006954 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	2200      	movs	r2, #0
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 f9c3 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	2200      	movs	r2, #0
 8006984:	2180      	movs	r1, #128	; 0x80
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 f9b5 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2240      	movs	r2, #64	; 0x40
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6852      	ldr	r2, [r2, #4]
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	4611      	mov	r1, r2
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
  }

  return USBD_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d105      	bne.n	8006a42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d10b      	bne.n	8006a78 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d004      	beq.n	8006aa8 <USBD_StdDevReq+0x24>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d002      	beq.n	8006aa8 <USBD_StdDevReq+0x24>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <USBD_StdDevReq+0x34>
 8006aa6:	e04c      	b.n	8006b42 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      break;
 8006ab6:	e049      	b.n	8006b4c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d83a      	bhi.n	8006b36 <USBD_StdDevReq+0xb2>
 8006ac0:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <USBD_StdDevReq+0x44>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006b19 	.word	0x08006b19
 8006acc:	08006b2d 	.word	0x08006b2d
 8006ad0:	08006b37 	.word	0x08006b37
 8006ad4:	08006b23 	.word	0x08006b23
 8006ad8:	08006b37 	.word	0x08006b37
 8006adc:	08006afb 	.word	0x08006afb
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006b37 	.word	0x08006b37
 8006ae8:	08006b0f 	.word	0x08006b0f
 8006aec:	08006b05 	.word	0x08006b05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9d4 	bl	8006ea0 <USBD_GetDescriptor>
          break;
 8006af8:	e022      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fb37 	bl	8007170 <USBD_SetAddress>
          break;
 8006b02:	e01d      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fb74 	bl	80071f4 <USBD_SetConfig>
          break;
 8006b0c:	e018      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fbfd 	bl	8007310 <USBD_GetConfig>
          break;
 8006b16:	e013      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fc2c 	bl	8007378 <USBD_GetStatus>
          break;
 8006b20:	e00e      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fc5a 	bl	80073de <USBD_SetFeature>
          break;
 8006b2a:	e009      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fc69 	bl	8007406 <USBD_ClrFeature>
          break;
 8006b34:	e004      	b.n	8006b40 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fcc1 	bl	80074c0 <USBD_CtlError>
          break;
 8006b3e:	bf00      	nop
      }
      break;
 8006b40:	e004      	b.n	8006b4c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fcbb 	bl	80074c0 <USBD_CtlError>
      break;
 8006b4a:	bf00      	nop
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d003      	beq.n	8006b7a <USBD_StdItfReq+0x22>
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d001      	beq.n	8006b7a <USBD_StdItfReq+0x22>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d12a      	bne.n	8006bd0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b80:	3b01      	subs	r3, #1
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d81d      	bhi.n	8006bc2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	889b      	ldrh	r3, [r3, #4]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d813      	bhi.n	8006bb8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	88db      	ldrh	r3, [r3, #6]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <USBD_StdItfReq+0x74>
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10d      	bne.n	8006bcc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fd4d 	bl	8007650 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bb6:	e009      	b.n	8006bcc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fc80 	bl	80074c0 <USBD_CtlError>
          break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc7b 	bl	80074c0 <USBD_CtlError>
          break;
 8006bca:	e000      	b.n	8006bce <USBD_StdItfReq+0x76>
          break;
 8006bcc:	bf00      	nop
      }
      break;
 8006bce:	e004      	b.n	8006bda <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fc74 	bl	80074c0 <USBD_CtlError>
      break;
 8006bd8:	bf00      	nop
  }

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	889b      	ldrh	r3, [r3, #4]
 8006bf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d004      	beq.n	8006c0e <USBD_StdEPReq+0x2a>
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d002      	beq.n	8006c0e <USBD_StdEPReq+0x2a>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <USBD_StdEPReq+0x3a>
 8006c0c:	e13d      	b.n	8006e8a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      break;
 8006c1c:	e13a      	b.n	8006e94 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d10a      	bne.n	8006c40 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	e12a      	b.n	8006e96 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d03e      	beq.n	8006cc6 <USBD_StdEPReq+0xe2>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d002      	beq.n	8006c52 <USBD_StdEPReq+0x6e>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d070      	beq.n	8006d32 <USBD_StdEPReq+0x14e>
 8006c50:	e115      	b.n	8006e7e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d002      	beq.n	8006c62 <USBD_StdEPReq+0x7e>
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d015      	beq.n	8006c8c <USBD_StdEPReq+0xa8>
 8006c60:	e02b      	b.n	8006cba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <USBD_StdEPReq+0x9e>
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	d009      	beq.n	8006c82 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 f884 	bl	8007d80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 f880 	bl	8007d80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c80:	e020      	b.n	8006cc4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc1b 	bl	80074c0 <USBD_CtlError>
              break;
 8006c8a:	e01b      	b.n	8006cc4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	885b      	ldrh	r3, [r3, #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10e      	bne.n	8006cb2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <USBD_StdEPReq+0xce>
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d008      	beq.n	8006cb2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	88db      	ldrh	r3, [r3, #6]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f867 	bl	8007d80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fccc 	bl	8007650 <USBD_CtlSendStatus>

              break;
 8006cb8:	e004      	b.n	8006cc4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fbff 	bl	80074c0 <USBD_CtlError>
              break;
 8006cc2:	bf00      	nop
          }
          break;
 8006cc4:	e0e0      	b.n	8006e88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d002      	beq.n	8006cd6 <USBD_StdEPReq+0xf2>
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d015      	beq.n	8006d00 <USBD_StdEPReq+0x11c>
 8006cd4:	e026      	b.n	8006d24 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <USBD_StdEPReq+0x112>
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d009      	beq.n	8006cf6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f84a 	bl	8007d80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006cec:	2180      	movs	r1, #128	; 0x80
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 f846 	bl	8007d80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf4:	e01c      	b.n	8006d30 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fbe1 	bl	80074c0 <USBD_CtlError>
              break;
 8006cfe:	e017      	b.n	8006d30 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	885b      	ldrh	r3, [r3, #2]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d112      	bne.n	8006d2e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 f851 	bl	8007dbe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc97 	bl	8007650 <USBD_CtlSendStatus>
              }
              break;
 8006d22:	e004      	b.n	8006d2e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fbca 	bl	80074c0 <USBD_CtlError>
              break;
 8006d2c:	e000      	b.n	8006d30 <USBD_StdEPReq+0x14c>
              break;
 8006d2e:	bf00      	nop
          }
          break;
 8006d30:	e0aa      	b.n	8006e88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d002      	beq.n	8006d42 <USBD_StdEPReq+0x15e>
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d032      	beq.n	8006da6 <USBD_StdEPReq+0x1c2>
 8006d40:	e097      	b.n	8006e72 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <USBD_StdEPReq+0x174>
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d004      	beq.n	8006d58 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fbb5 	bl	80074c0 <USBD_CtlError>
                break;
 8006d56:	e091      	b.n	8006e7c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da0b      	bge.n	8006d78 <USBD_StdEPReq+0x194>
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	3310      	adds	r3, #16
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	3304      	adds	r3, #4
 8006d76:	e00b      	b.n	8006d90 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbf8 	bl	8007594 <USBD_CtlSendData>
              break;
 8006da4:	e06a      	b.n	8006e7c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da11      	bge.n	8006dd2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3318      	adds	r3, #24
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d117      	bne.n	8006df8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb78 	bl	80074c0 <USBD_CtlError>
                  break;
 8006dd0:	e054      	b.n	8006e7c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	f003 020f 	and.w	r2, r3, #15
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb65 	bl	80074c0 <USBD_CtlError>
                  break;
 8006df6:	e041      	b.n	8006e7c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da0b      	bge.n	8006e18 <USBD_StdEPReq+0x234>
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	3310      	adds	r3, #16
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	3304      	adds	r3, #4
 8006e16:	e00b      	b.n	8006e30 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3304      	adds	r3, #4
 8006e30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <USBD_StdEPReq+0x25a>
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d103      	bne.n	8006e46 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e00e      	b.n	8006e64 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 ffd6 	bl	8007dfc <USBD_LL_IsStallEP>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e002      	b.n	8006e64 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2202      	movs	r2, #2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb92 	bl	8007594 <USBD_CtlSendData>
              break;
 8006e70:	e004      	b.n	8006e7c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb23 	bl	80074c0 <USBD_CtlError>
              break;
 8006e7a:	bf00      	nop
          }
          break;
 8006e7c:	e004      	b.n	8006e88 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb1d 	bl	80074c0 <USBD_CtlError>
          break;
 8006e86:	bf00      	nop
      }
      break;
 8006e88:	e004      	b.n	8006e94 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb17 	bl	80074c0 <USBD_CtlError>
      break;
 8006e92:	bf00      	nop
  }

  return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	f200 8128 	bhi.w	8007116 <USBD_GetDescriptor+0x276>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <USBD_GetDescriptor+0x2c>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006ee9 	.word	0x08006ee9
 8006ed0:	08006f01 	.word	0x08006f01
 8006ed4:	08006f41 	.word	0x08006f41
 8006ed8:	08007117 	.word	0x08007117
 8006edc:	08007117 	.word	0x08007117
 8006ee0:	080070b7 	.word	0x080070b7
 8006ee4:	080070e3 	.word	0x080070e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7c12      	ldrb	r2, [r2, #16]
 8006ef4:	f107 0108 	add.w	r1, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
      break;
 8006efe:	e112      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7c1b      	ldrb	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10d      	bne.n	8006f24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	f107 0208 	add.w	r2, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f22:	e100      	b.n	8007126 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	f107 0208 	add.w	r2, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	701a      	strb	r2, [r3, #0]
      break;
 8006f3e:	e0f2      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	885b      	ldrh	r3, [r3, #2]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	f200 80ac 	bhi.w	80070a4 <USBD_GetDescriptor+0x204>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <USBD_GetDescriptor+0xb4>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006fa1 	.word	0x08006fa1
 8006f5c:	08006fd5 	.word	0x08006fd5
 8006f60:	08007009 	.word	0x08007009
 8006f64:	0800703d 	.word	0x0800703d
 8006f68:	08007071 	.word	0x08007071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8e:	e091      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa94 	bl	80074c0 <USBD_CtlError>
            err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9e:	e089      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc2:	e077      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa7a 	bl	80074c0 <USBD_CtlError>
            err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fd2:	e06f      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e05d      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa60 	bl	80074c0 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e055      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702a:	e043      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa46 	bl	80074c0 <USBD_CtlError>
            err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
          break;
 800703a:	e03b      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705e:	e029      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa2c 	bl	80074c0 <USBD_CtlError>
            err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
          break;
 800706e:	e021      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007092:	e00f      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fa12 	bl	80074c0 <USBD_CtlError>
            err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
          break;
 80070a2:	e007      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa0a 	bl	80074c0 <USBD_CtlError>
          err++;
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	3301      	adds	r3, #1
 80070b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80070b2:	e038      	b.n	8007126 <USBD_GetDescriptor+0x286>
 80070b4:	e037      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7c1b      	ldrb	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	f107 0208 	add.w	r2, r7, #8
 80070ca:	4610      	mov	r0, r2
 80070cc:	4798      	blx	r3
 80070ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070d0:	e029      	b.n	8007126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f9f3 	bl	80074c0 <USBD_CtlError>
        err++;
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	3301      	adds	r3, #1
 80070de:	72fb      	strb	r3, [r7, #11]
      break;
 80070e0:	e021      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7c1b      	ldrb	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10d      	bne.n	8007106 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	f107 0208 	add.w	r2, r7, #8
 80070f6:	4610      	mov	r0, r2
 80070f8:	4798      	blx	r3
 80070fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	2207      	movs	r2, #7
 8007102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007104:	e00f      	b.n	8007126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9d9 	bl	80074c0 <USBD_CtlError>
        err++;
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	3301      	adds	r3, #1
 8007112:	72fb      	strb	r3, [r7, #11]
      break;
 8007114:	e007      	b.n	8007126 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9d1 	bl	80074c0 <USBD_CtlError>
      err++;
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	3301      	adds	r3, #1
 8007122:	72fb      	strb	r3, [r7, #11]
      break;
 8007124:	bf00      	nop
  }

  if (err != 0U)
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11c      	bne.n	8007166 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <USBD_GetDescriptor+0x2b6>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88da      	ldrh	r2, [r3, #6]
 800713e:	893b      	ldrh	r3, [r7, #8]
 8007140:	4293      	cmp	r3, r2
 8007142:	bf28      	it	cs
 8007144:	4613      	movcs	r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800714a:	893b      	ldrh	r3, [r7, #8]
 800714c:	461a      	mov	r2, r3
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa1f 	bl	8007594 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa76 	bl	8007650 <USBD_CtlSendStatus>
 8007164:	e000      	b.n	8007168 <USBD_GetDescriptor+0x2c8>
    return;
 8007166:	bf00      	nop
    }
  }
}
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	889b      	ldrh	r3, [r3, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d130      	bne.n	80071e4 <USBD_SetAddress+0x74>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88db      	ldrh	r3, [r3, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d12c      	bne.n	80071e4 <USBD_SetAddress+0x74>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	2b7f      	cmp	r3, #127	; 0x7f
 8007190:	d828      	bhi.n	80071e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d104      	bne.n	80071b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f988 	bl	80074c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b0:	e01c      	b.n	80071ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7bfa      	ldrb	r2, [r7, #15]
 80071b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fe48 	bl	8007e54 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa43 	bl	8007650 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d8:	e008      	b.n	80071ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	e003      	b.n	80071ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f96a 	bl	80074c0 <USBD_CtlError>
  }
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	885b      	ldrh	r3, [r3, #2]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	4b41      	ldr	r3, [pc, #260]	; (800730c <USBD_SetConfig+0x118>)
 8007206:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007208:	4b40      	ldr	r3, [pc, #256]	; (800730c <USBD_SetConfig+0x118>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d904      	bls.n	800721a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f954 	bl	80074c0 <USBD_CtlError>
 8007218:	e075      	b.n	8007306 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	2b02      	cmp	r3, #2
 8007222:	d002      	beq.n	800722a <USBD_SetConfig+0x36>
 8007224:	2b03      	cmp	r3, #3
 8007226:	d023      	beq.n	8007270 <USBD_SetConfig+0x7c>
 8007228:	e062      	b.n	80072f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800722a:	4b38      	ldr	r3, [pc, #224]	; (800730c <USBD_SetConfig+0x118>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01a      	beq.n	8007268 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007232:	4b36      	ldr	r3, [pc, #216]	; (800730c <USBD_SetConfig+0x118>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2203      	movs	r2, #3
 8007240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007244:	4b31      	ldr	r3, [pc, #196]	; (800730c <USBD_SetConfig+0x118>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f9f3 	bl	8006636 <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	2b02      	cmp	r3, #2
 8007254:	d104      	bne.n	8007260 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f931 	bl	80074c0 <USBD_CtlError>
            return;
 800725e:	e052      	b.n	8007306 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9f5 	bl	8007650 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007266:	e04e      	b.n	8007306 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f9f1 	bl	8007650 <USBD_CtlSendStatus>
        break;
 800726e:	e04a      	b.n	8007306 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007270:	4b26      	ldr	r3, [pc, #152]	; (800730c <USBD_SetConfig+0x118>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d112      	bne.n	800729e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007280:	4b22      	ldr	r3, [pc, #136]	; (800730c <USBD_SetConfig+0x118>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800728a:	4b20      	ldr	r3, [pc, #128]	; (800730c <USBD_SetConfig+0x118>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff f9ef 	bl	8006674 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9da 	bl	8007650 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800729c:	e033      	b.n	8007306 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800729e:	4b1b      	ldr	r3, [pc, #108]	; (800730c <USBD_SetConfig+0x118>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d01d      	beq.n	80072e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff f9dd 	bl	8006674 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072ba:	4b14      	ldr	r3, [pc, #80]	; (800730c <USBD_SetConfig+0x118>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <USBD_SetConfig+0x118>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff f9b3 	bl	8006636 <USBD_SetClassConfig>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d104      	bne.n	80072e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8f1 	bl	80074c0 <USBD_CtlError>
            return;
 80072de:	e012      	b.n	8007306 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9b5 	bl	8007650 <USBD_CtlSendStatus>
        break;
 80072e6:	e00e      	b.n	8007306 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9b1 	bl	8007650 <USBD_CtlSendStatus>
        break;
 80072ee:	e00a      	b.n	8007306 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8e4 	bl	80074c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <USBD_SetConfig+0x118>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f9b8 	bl	8006674 <USBD_ClrClassConfig>
        break;
 8007304:	bf00      	nop
    }
  }
}
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	2000021c 	.word	0x2000021c

08007310 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	88db      	ldrh	r3, [r3, #6]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d004      	beq.n	800732c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8cb 	bl	80074c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800732a:	e021      	b.n	8007370 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007332:	2b01      	cmp	r3, #1
 8007334:	db17      	blt.n	8007366 <USBD_GetConfig+0x56>
 8007336:	2b02      	cmp	r3, #2
 8007338:	dd02      	ble.n	8007340 <USBD_GetConfig+0x30>
 800733a:	2b03      	cmp	r3, #3
 800733c:	d00b      	beq.n	8007356 <USBD_GetConfig+0x46>
 800733e:	e012      	b.n	8007366 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3308      	adds	r3, #8
 800734a:	2201      	movs	r2, #1
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f920 	bl	8007594 <USBD_CtlSendData>
        break;
 8007354:	e00c      	b.n	8007370 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	2201      	movs	r2, #1
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f918 	bl	8007594 <USBD_CtlSendData>
        break;
 8007364:	e004      	b.n	8007370 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8a9 	bl	80074c0 <USBD_CtlError>
        break;
 800736e:	bf00      	nop
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	3b01      	subs	r3, #1
 800738a:	2b02      	cmp	r3, #2
 800738c:	d81e      	bhi.n	80073cc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d004      	beq.n	80073a0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f891 	bl	80074c0 <USBD_CtlError>
        break;
 800739e:	e01a      	b.n	80073d6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f043 0202 	orr.w	r2, r3, #2
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	330c      	adds	r3, #12
 80073c0:	2202      	movs	r2, #2
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f8e5 	bl	8007594 <USBD_CtlSendData>
      break;
 80073ca:	e004      	b.n	80073d6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f876 	bl	80074c0 <USBD_CtlError>
      break;
 80073d4:	bf00      	nop
  }
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	885b      	ldrh	r3, [r3, #2]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d106      	bne.n	80073fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f929 	bl	8007650 <USBD_CtlSendStatus>
  }
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007416:	3b01      	subs	r3, #1
 8007418:	2b02      	cmp	r3, #2
 800741a:	d80b      	bhi.n	8007434 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	885b      	ldrh	r3, [r3, #2]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d10c      	bne.n	800743e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f90f 	bl	8007650 <USBD_CtlSendStatus>
      }
      break;
 8007432:	e004      	b.n	800743e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f842 	bl	80074c0 <USBD_CtlError>
      break;
 800743c:	e000      	b.n	8007440 <USBD_ClrFeature+0x3a>
      break;
 800743e:	bf00      	nop
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781a      	ldrb	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	785a      	ldrb	r2, [r3, #1]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	3302      	adds	r3, #2
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b29a      	uxth	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	3303      	adds	r3, #3
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	b29b      	uxth	r3, r3
 8007476:	4413      	add	r3, r2
 8007478:	b29a      	uxth	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b29a      	uxth	r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	3305      	adds	r3, #5
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	b29b      	uxth	r3, r3
 8007492:	4413      	add	r3, r2
 8007494:	b29a      	uxth	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	3306      	adds	r3, #6
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	3307      	adds	r3, #7
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	80da      	strh	r2, [r3, #6]

}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr

080074c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc57 	bl	8007d80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80074d2:	2100      	movs	r1, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc53 	bl	8007d80 <USBD_LL_StallEP>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d032      	beq.n	800755e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f834 	bl	8007566 <USBD_GetLen>
 80074fe:	4603      	mov	r3, r0
 8007500:	3301      	adds	r3, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	75fa      	strb	r2, [r7, #23]
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4413      	add	r3, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	75fa      	strb	r2, [r7, #23]
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	2203      	movs	r2, #3
 800752c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800752e:	e012      	b.n	8007556 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	60fa      	str	r2, [r7, #12]
 8007536:	7dfa      	ldrb	r2, [r7, #23]
 8007538:	1c51      	adds	r1, r2, #1
 800753a:	75f9      	strb	r1, [r7, #23]
 800753c:	4611      	mov	r1, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	440a      	add	r2, r1
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	75fa      	strb	r2, [r7, #23]
 800754c:	461a      	mov	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4413      	add	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e8      	bne.n	8007530 <USBD_GetString+0x4e>
    }
  }
}
 800755e:	bf00      	nop
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007572:	e005      	b.n	8007580 <USBD_GetLen+0x1a>
  {
    len++;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	3301      	adds	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
    buf++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3301      	adds	r3, #1
 800757e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f5      	bne.n	8007574 <USBD_GetLen+0xe>
  }

  return len;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr

08007594 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	2100      	movs	r1, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fc68 	bl	8007e92 <USBD_LL_Transmit>

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	2100      	movs	r1, #0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fc56 	bl	8007e92 <USBD_LL_Transmit>

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2203      	movs	r2, #3
 8007602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007616:	88fb      	ldrh	r3, [r7, #6]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	2100      	movs	r1, #0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fc5b 	bl	8007ed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800763a:	88fb      	ldrh	r3, [r7, #6]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	2100      	movs	r1, #0
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fc49 	bl	8007ed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2204      	movs	r2, #4
 800765c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007660:	2300      	movs	r3, #0
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc13 	bl	8007e92 <USBD_LL_Transmit>

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2205      	movs	r2, #5
 8007682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007686:	2300      	movs	r3, #0
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fc23 	bl	8007ed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076a0:	2200      	movs	r2, #0
 80076a2:	4912      	ldr	r1, [pc, #72]	; (80076ec <MX_USB_DEVICE_Init+0x50>)
 80076a4:	4812      	ldr	r0, [pc, #72]	; (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076a6:	f7fe ff6c 	bl	8006582 <USBD_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076b0:	f7f9 fb50 	bl	8000d54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076b4:	490f      	ldr	r1, [pc, #60]	; (80076f4 <MX_USB_DEVICE_Init+0x58>)
 80076b6:	480e      	ldr	r0, [pc, #56]	; (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076b8:	f7fe ff8e 	bl	80065d8 <USBD_RegisterClass>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076c2:	f7f9 fb47 	bl	8000d54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076c6:	490c      	ldr	r1, [pc, #48]	; (80076f8 <MX_USB_DEVICE_Init+0x5c>)
 80076c8:	4809      	ldr	r0, [pc, #36]	; (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076ca:	f7fe febf 	bl	800644c <USBD_CDC_RegisterInterface>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076d4:	f7f9 fb3e 	bl	8000d54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076d8:	4805      	ldr	r0, [pc, #20]	; (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076da:	f7fe ff96 	bl	800660a <USBD_Start>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076e4:	f7f9 fb36 	bl	8000d54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076e8:	bf00      	nop
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000134 	.word	0x20000134
 80076f0:	2000052c 	.word	0x2000052c
 80076f4:	20000020 	.word	0x20000020
 80076f8:	20000124 	.word	0x20000124

080076fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007700:	2200      	movs	r2, #0
 8007702:	4905      	ldr	r1, [pc, #20]	; (8007718 <CDC_Init_FS+0x1c>)
 8007704:	4805      	ldr	r0, [pc, #20]	; (800771c <CDC_Init_FS+0x20>)
 8007706:	f7fe feb7 	bl	8006478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800770a:	4905      	ldr	r1, [pc, #20]	; (8007720 <CDC_Init_FS+0x24>)
 800770c:	4803      	ldr	r0, [pc, #12]	; (800771c <CDC_Init_FS+0x20>)
 800770e:	f7fe fecc 	bl	80064aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007712:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007714:	4618      	mov	r0, r3
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000bd8 	.word	0x20000bd8
 800771c:	2000052c 	.word	0x2000052c
 8007720:	200007f0 	.word	0x200007f0

08007724 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007728:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800772a:	4618      	mov	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr
	...

08007734 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
 8007740:	4613      	mov	r3, r2
 8007742:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b23      	cmp	r3, #35	; 0x23
 8007748:	d84a      	bhi.n	80077e0 <CDC_Control_FS+0xac>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <CDC_Control_FS+0x1c>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	080077e1 	.word	0x080077e1
 8007754:	080077e1 	.word	0x080077e1
 8007758:	080077e1 	.word	0x080077e1
 800775c:	080077e1 	.word	0x080077e1
 8007760:	080077e1 	.word	0x080077e1
 8007764:	080077e1 	.word	0x080077e1
 8007768:	080077e1 	.word	0x080077e1
 800776c:	080077e1 	.word	0x080077e1
 8007770:	080077e1 	.word	0x080077e1
 8007774:	080077e1 	.word	0x080077e1
 8007778:	080077e1 	.word	0x080077e1
 800777c:	080077e1 	.word	0x080077e1
 8007780:	080077e1 	.word	0x080077e1
 8007784:	080077e1 	.word	0x080077e1
 8007788:	080077e1 	.word	0x080077e1
 800778c:	080077e1 	.word	0x080077e1
 8007790:	080077e1 	.word	0x080077e1
 8007794:	080077e1 	.word	0x080077e1
 8007798:	080077e1 	.word	0x080077e1
 800779c:	080077e1 	.word	0x080077e1
 80077a0:	080077e1 	.word	0x080077e1
 80077a4:	080077e1 	.word	0x080077e1
 80077a8:	080077e1 	.word	0x080077e1
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	080077e1 	.word	0x080077e1
 80077b4:	080077e1 	.word	0x080077e1
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e1 	.word	0x080077e1
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	080077e1 	.word	0x080077e1
 80077c8:	080077e1 	.word	0x080077e1
 80077cc:	080077e1 	.word	0x080077e1
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077e1 	.word	0x080077e1
 80077d8:	080077e1 	.word	0x080077e1
 80077dc:	080077e1 	.word	0x080077e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077e0:	bf00      	nop
  }

  return (USBD_OK);
 80077e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usbrxcallback(Buf,Len);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7f9 fa6d 	bl	8000cdc <usbrxcallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <CDC_Receive_FS+0x2c>)
 8007806:	f7fe fe50 	bl	80064aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800780a:	4804      	ldr	r0, [pc, #16]	; (800781c <CDC_Receive_FS+0x2c>)
 800780c:	f7fe fe8f 	bl	800652e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007810:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000052c 	.word	0x2000052c

08007820 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <CDC_Transmit_FS+0x48>)
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007842:	2301      	movs	r3, #1
 8007844:	e00b      	b.n	800785e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	461a      	mov	r2, r3
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4806      	ldr	r0, [pc, #24]	; (8007868 <CDC_Transmit_FS+0x48>)
 800784e:	f7fe fe13 	bl	8006478 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007852:	4805      	ldr	r0, [pc, #20]	; (8007868 <CDC_Transmit_FS+0x48>)
 8007854:	f7fe fe3c 	bl	80064d0 <USBD_CDC_TransmitPacket>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	2000052c 	.word	0x2000052c

0800786c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	6039      	str	r1, [r7, #0]
 8007876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2212      	movs	r2, #18
 800787c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20000150 	.word	0x20000150

08007890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2204      	movs	r2, #4
 80078a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20000164 	.word	0x20000164

080078b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4907      	ldr	r1, [pc, #28]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078ca:	4808      	ldr	r0, [pc, #32]	; (80078ec <USBD_FS_ProductStrDescriptor+0x38>)
 80078cc:	f7ff fe09 	bl	80074e2 <USBD_GetString>
 80078d0:	e004      	b.n	80078dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4904      	ldr	r1, [pc, #16]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d6:	4805      	ldr	r0, [pc, #20]	; (80078ec <USBD_FS_ProductStrDescriptor+0x38>)
 80078d8:	f7ff fe03 	bl	80074e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000fc0 	.word	0x20000fc0
 80078ec:	08008904 	.word	0x08008904

080078f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	4904      	ldr	r1, [pc, #16]	; (8007910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007900:	4804      	ldr	r0, [pc, #16]	; (8007914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007902:	f7ff fdee 	bl	80074e2 <USBD_GetString>
  return USBD_StrDesc;
 8007906:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000fc0 	.word	0x20000fc0
 8007914:	0800891c 	.word	0x0800891c

08007918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	221a      	movs	r2, #26
 8007928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800792a:	f000 f843 	bl	80079b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800792e:	4b02      	ldr	r3, [pc, #8]	; (8007938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000168 	.word	0x20000168

0800793c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4907      	ldr	r1, [pc, #28]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007952:	4808      	ldr	r0, [pc, #32]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007954:	f7ff fdc5 	bl	80074e2 <USBD_GetString>
 8007958:	e004      	b.n	8007964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4904      	ldr	r1, [pc, #16]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800795e:	4805      	ldr	r0, [pc, #20]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007960:	f7ff fdbf 	bl	80074e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000fc0 	.word	0x20000fc0
 8007974:	08008930 	.word	0x08008930

08007978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4907      	ldr	r1, [pc, #28]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800798e:	4808      	ldr	r0, [pc, #32]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007990:	f7ff fda7 	bl	80074e2 <USBD_GetString>
 8007994:	e004      	b.n	80079a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4904      	ldr	r1, [pc, #16]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799a:	4805      	ldr	r0, [pc, #20]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800799c:	f7ff fda1 	bl	80074e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a0:	4b02      	ldr	r3, [pc, #8]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000fc0 	.word	0x20000fc0
 80079b0:	0800893c 	.word	0x0800893c

080079b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ba:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <Get_SerialNum+0x44>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <Get_SerialNum+0x48>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079c6:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <Get_SerialNum+0x4c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079da:	2208      	movs	r2, #8
 80079dc:	4909      	ldr	r1, [pc, #36]	; (8007a04 <Get_SerialNum+0x50>)
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f814 	bl	8007a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e4:	2204      	movs	r2, #4
 80079e6:	4908      	ldr	r1, [pc, #32]	; (8007a08 <Get_SerialNum+0x54>)
 80079e8:	68b8      	ldr	r0, [r7, #8]
 80079ea:	f000 f80f 	bl	8007a0c <IntToUnicode>
  }
}
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	1ffff7e8 	.word	0x1ffff7e8
 80079fc:	1ffff7ec 	.word	0x1ffff7ec
 8007a00:	1ffff7f0 	.word	0x1ffff7f0
 8007a04:	2000016a 	.word	0x2000016a
 8007a08:	2000017a 	.word	0x2000017a

08007a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
 8007a22:	e027      	b.n	8007a74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0f1b      	lsrs	r3, r3, #28
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	d80b      	bhi.n	8007a44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	0f1b      	lsrs	r3, r3, #28
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4619      	mov	r1, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3230      	adds	r2, #48	; 0x30
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e00a      	b.n	8007a5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	0f1b      	lsrs	r3, r3, #28
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	440b      	add	r3, r1
 8007a54:	3237      	adds	r2, #55	; 0x37
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	3301      	adds	r3, #1
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4413      	add	r3, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	3301      	adds	r3, #1
 8007a72:	75fb      	strb	r3, [r7, #23]
 8007a74:	7dfa      	ldrb	r2, [r7, #23]
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3d3      	bcc.n	8007a24 <IntToUnicode+0x18>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bc80      	pop	{r7}
 8007a84:	4770      	bx	lr
	...

08007a88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <HAL_PCD_MspInit+0x44>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d113      	bne.n	8007ac2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <HAL_PCD_MspInit+0x48>)
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	4a0c      	ldr	r2, [pc, #48]	; (8007ad0 <HAL_PCD_MspInit+0x48>)
 8007aa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007aa4:	61d3      	str	r3, [r2, #28]
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <HAL_PCD_MspInit+0x48>)
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	2014      	movs	r0, #20
 8007ab8:	f7f9 fbd9 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007abc:	2014      	movs	r0, #20
 8007abe:	f7f9 fbf2 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40005c00 	.word	0x40005c00
 8007ad0:	40021000 	.word	0x40021000

08007ad4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f7fe fdd5 	bl	800669a <USBD_LL_SetupStage>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	440b      	add	r3, r1
 8007b18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7fe fe05 	bl	8006730 <USBD_LL_DataOutStage>
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	440b      	add	r3, r1
 8007b4e:	333c      	adds	r3, #60	; 0x3c
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7fe fe5c 	bl	8006812 <USBD_LL_DataInStage>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe ff6c 	bl	8006a4e <USBD_LL_SOF>
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b86:	2301      	movs	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d001      	beq.n	8007b96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b92:	f7f9 f8df 	bl	8000d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b9c:	7bfa      	ldrb	r2, [r7, #15]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe ff1c 	bl	80069de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe fed5 	bl	800695c <USBD_LL_Reset>
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe ff16 	bl	80069fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <HAL_PCD_SuspendCallback+0x30>)
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	4a03      	ldr	r2, [pc, #12]	; (8007bec <HAL_PCD_SuspendCallback+0x30>)
 8007bde:	f043 0306 	orr.w	r3, r3, #6
 8007be2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe ff10 	bl	8006a24 <USBD_LL_Resume>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c14:	4a28      	ldr	r2, [pc, #160]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a26      	ldr	r2, [pc, #152]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c24:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c26:	4a25      	ldr	r2, [pc, #148]	; (8007cbc <USBD_LL_Init+0xb0>)
 8007c28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c2a:	4b23      	ldr	r3, [pc, #140]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c2c:	2208      	movs	r2, #8
 8007c2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c30:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c32:	2202      	movs	r2, #2
 8007c34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c36:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c3c:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c42:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c48:	481b      	ldr	r0, [pc, #108]	; (8007cb8 <USBD_LL_Init+0xac>)
 8007c4a:	f7f9 fcb9 	bl	80015c0 <HAL_PCD_Init>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c54:	f7f9 f87e 	bl	8000d54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c5e:	2318      	movs	r3, #24
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	f7fa ffed 	bl	8002c42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c6e:	2358      	movs	r3, #88	; 0x58
 8007c70:	2200      	movs	r2, #0
 8007c72:	2180      	movs	r1, #128	; 0x80
 8007c74:	f7fa ffe5 	bl	8002c42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c7e:	23c0      	movs	r3, #192	; 0xc0
 8007c80:	2200      	movs	r2, #0
 8007c82:	2181      	movs	r1, #129	; 0x81
 8007c84:	f7fa ffdd 	bl	8002c42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c8e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007c92:	2200      	movs	r2, #0
 8007c94:	2101      	movs	r1, #1
 8007c96:	f7fa ffd4 	bl	8002c42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2182      	movs	r1, #130	; 0x82
 8007ca8:	f7fa ffcb 	bl	8002c42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200011c0 	.word	0x200011c0
 8007cbc:	40005c00 	.word	0x40005c00

08007cc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7f9 fd7d 	bl	80017d6 <HAL_PCD_Start>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f94e 	bl	8007f84 <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	70fb      	strb	r3, [r7, #3]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70bb      	strb	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d1e:	78bb      	ldrb	r3, [r7, #2]
 8007d20:	883a      	ldrh	r2, [r7, #0]
 8007d22:	78f9      	ldrb	r1, [r7, #3]
 8007d24:	f7f9 fef7 	bl	8001b16 <HAL_PCD_EP_Open>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f928 	bl	8007f84 <USBD_Get_USB_Status>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7f9 ff3e 	bl	8001be2 <HAL_PCD_EP_Close>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f909 	bl	8007f84 <USBD_Get_USB_Status>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f9 fffe 	bl	8001da0 <HAL_PCD_EP_SetStall>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f8ea 	bl	8007f84 <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fa f83f 	bl	8001e60 <HAL_PCD_EP_ClrStall>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f8cb 	bl	8007f84 <USBD_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da0c      	bge.n	8007e32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	e00b      	b.n	8007e4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	440b      	add	r3, r1
 8007e44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7f9 fe2a 	bl	8001acc <HAL_PCD_SetAddress>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f880 	bl	8007f84 <USBD_Get_USB_Status>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	72fb      	strb	r3, [r7, #11]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb4:	893b      	ldrh	r3, [r7, #8]
 8007eb6:	7af9      	ldrb	r1, [r7, #11]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	f7f9 ff2e 	bl	8001d1a <HAL_PCD_EP_Transmit>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 f85d 	bl	8007f84 <USBD_Get_USB_Status>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ece:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	72fb      	strb	r3, [r7, #11]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007efa:	893b      	ldrh	r3, [r7, #8]
 8007efc:	7af9      	ldrb	r1, [r7, #11]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	f7f9 feb7 	bl	8001c72 <HAL_PCD_EP_Receive>
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f83a 	bl	8007f84 <USBD_Get_USB_Status>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f14:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7f9 fed9 	bl	8001cec <HAL_PCD_EP_GetRxCount>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <USBD_static_malloc+0x14>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr
 8007f58:	20000220 	.word	0x20000220

08007f5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d817      	bhi.n	8007fc8 <USBD_Get_USB_Status+0x44>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <USBD_Get_USB_Status+0x1c>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fb7 	.word	0x08007fb7
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fc3 	.word	0x08007fc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	e00b      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fba:	e008      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	e005      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc6:	e002      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	73fb      	strb	r3, [r7, #15]
    break;
 8007fcc:	bf00      	nop
  }
  return usb_status;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop

08007fdc <__errno>:
 8007fdc:	4b01      	ldr	r3, [pc, #4]	; (8007fe4 <__errno+0x8>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000184 	.word	0x20000184

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	2500      	movs	r5, #0
 8007fec:	4e0c      	ldr	r6, [pc, #48]	; (8008020 <__libc_init_array+0x38>)
 8007fee:	4c0d      	ldr	r4, [pc, #52]	; (8008024 <__libc_init_array+0x3c>)
 8007ff0:	1ba4      	subs	r4, r4, r6
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	42a5      	cmp	r5, r4
 8007ff6:	d109      	bne.n	800800c <__libc_init_array+0x24>
 8007ff8:	f000 fc34 	bl	8008864 <_init>
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	4e0a      	ldr	r6, [pc, #40]	; (8008028 <__libc_init_array+0x40>)
 8008000:	4c0a      	ldr	r4, [pc, #40]	; (800802c <__libc_init_array+0x44>)
 8008002:	1ba4      	subs	r4, r4, r6
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	42a5      	cmp	r5, r4
 8008008:	d105      	bne.n	8008016 <__libc_init_array+0x2e>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008010:	4798      	blx	r3
 8008012:	3501      	adds	r5, #1
 8008014:	e7ee      	b.n	8007ff4 <__libc_init_array+0xc>
 8008016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800801a:	4798      	blx	r3
 800801c:	3501      	adds	r5, #1
 800801e:	e7f2      	b.n	8008006 <__libc_init_array+0x1e>
 8008020:	08008990 	.word	0x08008990
 8008024:	08008990 	.word	0x08008990
 8008028:	08008990 	.word	0x08008990
 800802c:	08008994 	.word	0x08008994

08008030 <memset>:
 8008030:	4603      	mov	r3, r0
 8008032:	4402      	add	r2, r0
 8008034:	4293      	cmp	r3, r2
 8008036:	d100      	bne.n	800803a <memset+0xa>
 8008038:	4770      	bx	lr
 800803a:	f803 1b01 	strb.w	r1, [r3], #1
 800803e:	e7f9      	b.n	8008034 <memset+0x4>

08008040 <siprintf>:
 8008040:	b40e      	push	{r1, r2, r3}
 8008042:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008046:	b500      	push	{lr}
 8008048:	b09c      	sub	sp, #112	; 0x70
 800804a:	ab1d      	add	r3, sp, #116	; 0x74
 800804c:	9002      	str	r0, [sp, #8]
 800804e:	9006      	str	r0, [sp, #24]
 8008050:	9107      	str	r1, [sp, #28]
 8008052:	9104      	str	r1, [sp, #16]
 8008054:	4808      	ldr	r0, [pc, #32]	; (8008078 <siprintf+0x38>)
 8008056:	4909      	ldr	r1, [pc, #36]	; (800807c <siprintf+0x3c>)
 8008058:	f853 2b04 	ldr.w	r2, [r3], #4
 800805c:	9105      	str	r1, [sp, #20]
 800805e:	6800      	ldr	r0, [r0, #0]
 8008060:	a902      	add	r1, sp, #8
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	f000 f866 	bl	8008134 <_svfiprintf_r>
 8008068:	2200      	movs	r2, #0
 800806a:	9b02      	ldr	r3, [sp, #8]
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	b01c      	add	sp, #112	; 0x70
 8008070:	f85d eb04 	ldr.w	lr, [sp], #4
 8008074:	b003      	add	sp, #12
 8008076:	4770      	bx	lr
 8008078:	20000184 	.word	0x20000184
 800807c:	ffff0208 	.word	0xffff0208

08008080 <__ssputs_r>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	688e      	ldr	r6, [r1, #8]
 8008086:	4682      	mov	sl, r0
 8008088:	429e      	cmp	r6, r3
 800808a:	460c      	mov	r4, r1
 800808c:	4690      	mov	r8, r2
 800808e:	4699      	mov	r9, r3
 8008090:	d837      	bhi.n	8008102 <__ssputs_r+0x82>
 8008092:	898a      	ldrh	r2, [r1, #12]
 8008094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008098:	d031      	beq.n	80080fe <__ssputs_r+0x7e>
 800809a:	2302      	movs	r3, #2
 800809c:	6825      	ldr	r5, [r4, #0]
 800809e:	6909      	ldr	r1, [r1, #16]
 80080a0:	1a6f      	subs	r7, r5, r1
 80080a2:	6965      	ldr	r5, [r4, #20]
 80080a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80080ac:	f109 0301 	add.w	r3, r9, #1
 80080b0:	443b      	add	r3, r7
 80080b2:	429d      	cmp	r5, r3
 80080b4:	bf38      	it	cc
 80080b6:	461d      	movcc	r5, r3
 80080b8:	0553      	lsls	r3, r2, #21
 80080ba:	d530      	bpl.n	800811e <__ssputs_r+0x9e>
 80080bc:	4629      	mov	r1, r5
 80080be:	f000 fb37 	bl	8008730 <_malloc_r>
 80080c2:	4606      	mov	r6, r0
 80080c4:	b950      	cbnz	r0, 80080dc <__ssputs_r+0x5c>
 80080c6:	230c      	movs	r3, #12
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080cc:	f8ca 3000 	str.w	r3, [sl]
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080dc:	463a      	mov	r2, r7
 80080de:	6921      	ldr	r1, [r4, #16]
 80080e0:	f000 fab6 	bl	8008650 <memcpy>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	6126      	str	r6, [r4, #16]
 80080f2:	443e      	add	r6, r7
 80080f4:	6026      	str	r6, [r4, #0]
 80080f6:	464e      	mov	r6, r9
 80080f8:	6165      	str	r5, [r4, #20]
 80080fa:	1bed      	subs	r5, r5, r7
 80080fc:	60a5      	str	r5, [r4, #8]
 80080fe:	454e      	cmp	r6, r9
 8008100:	d900      	bls.n	8008104 <__ssputs_r+0x84>
 8008102:	464e      	mov	r6, r9
 8008104:	4632      	mov	r2, r6
 8008106:	4641      	mov	r1, r8
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	f000 faac 	bl	8008666 <memmove>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	2000      	movs	r0, #0
 8008112:	1b9b      	subs	r3, r3, r6
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	441e      	add	r6, r3
 800811a:	6026      	str	r6, [r4, #0]
 800811c:	e7dc      	b.n	80080d8 <__ssputs_r+0x58>
 800811e:	462a      	mov	r2, r5
 8008120:	f000 fb60 	bl	80087e4 <_realloc_r>
 8008124:	4606      	mov	r6, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	d1e2      	bne.n	80080f0 <__ssputs_r+0x70>
 800812a:	6921      	ldr	r1, [r4, #16]
 800812c:	4650      	mov	r0, sl
 800812e:	f000 fab3 	bl	8008698 <_free_r>
 8008132:	e7c8      	b.n	80080c6 <__ssputs_r+0x46>

08008134 <_svfiprintf_r>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	461d      	mov	r5, r3
 800813a:	898b      	ldrh	r3, [r1, #12]
 800813c:	b09d      	sub	sp, #116	; 0x74
 800813e:	061f      	lsls	r7, r3, #24
 8008140:	4680      	mov	r8, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4616      	mov	r6, r2
 8008146:	d50f      	bpl.n	8008168 <_svfiprintf_r+0x34>
 8008148:	690b      	ldr	r3, [r1, #16]
 800814a:	b96b      	cbnz	r3, 8008168 <_svfiprintf_r+0x34>
 800814c:	2140      	movs	r1, #64	; 0x40
 800814e:	f000 faef 	bl	8008730 <_malloc_r>
 8008152:	6020      	str	r0, [r4, #0]
 8008154:	6120      	str	r0, [r4, #16]
 8008156:	b928      	cbnz	r0, 8008164 <_svfiprintf_r+0x30>
 8008158:	230c      	movs	r3, #12
 800815a:	f8c8 3000 	str.w	r3, [r8]
 800815e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008162:	e0c8      	b.n	80082f6 <_svfiprintf_r+0x1c2>
 8008164:	2340      	movs	r3, #64	; 0x40
 8008166:	6163      	str	r3, [r4, #20]
 8008168:	2300      	movs	r3, #0
 800816a:	9309      	str	r3, [sp, #36]	; 0x24
 800816c:	2320      	movs	r3, #32
 800816e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008172:	2330      	movs	r3, #48	; 0x30
 8008174:	f04f 0b01 	mov.w	fp, #1
 8008178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800817c:	9503      	str	r5, [sp, #12]
 800817e:	4637      	mov	r7, r6
 8008180:	463d      	mov	r5, r7
 8008182:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008186:	b10b      	cbz	r3, 800818c <_svfiprintf_r+0x58>
 8008188:	2b25      	cmp	r3, #37	; 0x25
 800818a:	d13e      	bne.n	800820a <_svfiprintf_r+0xd6>
 800818c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008190:	d00b      	beq.n	80081aa <_svfiprintf_r+0x76>
 8008192:	4653      	mov	r3, sl
 8008194:	4632      	mov	r2, r6
 8008196:	4621      	mov	r1, r4
 8008198:	4640      	mov	r0, r8
 800819a:	f7ff ff71 	bl	8008080 <__ssputs_r>
 800819e:	3001      	adds	r0, #1
 80081a0:	f000 80a4 	beq.w	80082ec <_svfiprintf_r+0x1b8>
 80081a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a6:	4453      	add	r3, sl
 80081a8:	9309      	str	r3, [sp, #36]	; 0x24
 80081aa:	783b      	ldrb	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 809d 	beq.w	80082ec <_svfiprintf_r+0x1b8>
 80081b2:	2300      	movs	r3, #0
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081c4:	931a      	str	r3, [sp, #104]	; 0x68
 80081c6:	462f      	mov	r7, r5
 80081c8:	2205      	movs	r2, #5
 80081ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80081ce:	4850      	ldr	r0, [pc, #320]	; (8008310 <_svfiprintf_r+0x1dc>)
 80081d0:	f000 fa30 	bl	8008634 <memchr>
 80081d4:	9b04      	ldr	r3, [sp, #16]
 80081d6:	b9d0      	cbnz	r0, 800820e <_svfiprintf_r+0xda>
 80081d8:	06d9      	lsls	r1, r3, #27
 80081da:	bf44      	itt	mi
 80081dc:	2220      	movmi	r2, #32
 80081de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081e2:	071a      	lsls	r2, r3, #28
 80081e4:	bf44      	itt	mi
 80081e6:	222b      	movmi	r2, #43	; 0x2b
 80081e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081ec:	782a      	ldrb	r2, [r5, #0]
 80081ee:	2a2a      	cmp	r2, #42	; 0x2a
 80081f0:	d015      	beq.n	800821e <_svfiprintf_r+0xea>
 80081f2:	462f      	mov	r7, r5
 80081f4:	2000      	movs	r0, #0
 80081f6:	250a      	movs	r5, #10
 80081f8:	9a07      	ldr	r2, [sp, #28]
 80081fa:	4639      	mov	r1, r7
 80081fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008200:	3b30      	subs	r3, #48	; 0x30
 8008202:	2b09      	cmp	r3, #9
 8008204:	d94d      	bls.n	80082a2 <_svfiprintf_r+0x16e>
 8008206:	b1b8      	cbz	r0, 8008238 <_svfiprintf_r+0x104>
 8008208:	e00f      	b.n	800822a <_svfiprintf_r+0xf6>
 800820a:	462f      	mov	r7, r5
 800820c:	e7b8      	b.n	8008180 <_svfiprintf_r+0x4c>
 800820e:	4a40      	ldr	r2, [pc, #256]	; (8008310 <_svfiprintf_r+0x1dc>)
 8008210:	463d      	mov	r5, r7
 8008212:	1a80      	subs	r0, r0, r2
 8008214:	fa0b f000 	lsl.w	r0, fp, r0
 8008218:	4318      	orrs	r0, r3
 800821a:	9004      	str	r0, [sp, #16]
 800821c:	e7d3      	b.n	80081c6 <_svfiprintf_r+0x92>
 800821e:	9a03      	ldr	r2, [sp, #12]
 8008220:	1d11      	adds	r1, r2, #4
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	9103      	str	r1, [sp, #12]
 8008226:	2a00      	cmp	r2, #0
 8008228:	db01      	blt.n	800822e <_svfiprintf_r+0xfa>
 800822a:	9207      	str	r2, [sp, #28]
 800822c:	e004      	b.n	8008238 <_svfiprintf_r+0x104>
 800822e:	4252      	negs	r2, r2
 8008230:	f043 0302 	orr.w	r3, r3, #2
 8008234:	9207      	str	r2, [sp, #28]
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	783b      	ldrb	r3, [r7, #0]
 800823a:	2b2e      	cmp	r3, #46	; 0x2e
 800823c:	d10c      	bne.n	8008258 <_svfiprintf_r+0x124>
 800823e:	787b      	ldrb	r3, [r7, #1]
 8008240:	2b2a      	cmp	r3, #42	; 0x2a
 8008242:	d133      	bne.n	80082ac <_svfiprintf_r+0x178>
 8008244:	9b03      	ldr	r3, [sp, #12]
 8008246:	3702      	adds	r7, #2
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9203      	str	r2, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb8      	it	lt
 8008252:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	4d2e      	ldr	r5, [pc, #184]	; (8008314 <_svfiprintf_r+0x1e0>)
 800825a:	2203      	movs	r2, #3
 800825c:	7839      	ldrb	r1, [r7, #0]
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f9e8 	bl	8008634 <memchr>
 8008264:	b138      	cbz	r0, 8008276 <_svfiprintf_r+0x142>
 8008266:	2340      	movs	r3, #64	; 0x40
 8008268:	1b40      	subs	r0, r0, r5
 800826a:	fa03 f000 	lsl.w	r0, r3, r0
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	3701      	adds	r7, #1
 8008272:	4303      	orrs	r3, r0
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	7839      	ldrb	r1, [r7, #0]
 8008278:	2206      	movs	r2, #6
 800827a:	4827      	ldr	r0, [pc, #156]	; (8008318 <_svfiprintf_r+0x1e4>)
 800827c:	1c7e      	adds	r6, r7, #1
 800827e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008282:	f000 f9d7 	bl	8008634 <memchr>
 8008286:	2800      	cmp	r0, #0
 8008288:	d038      	beq.n	80082fc <_svfiprintf_r+0x1c8>
 800828a:	4b24      	ldr	r3, [pc, #144]	; (800831c <_svfiprintf_r+0x1e8>)
 800828c:	bb13      	cbnz	r3, 80082d4 <_svfiprintf_r+0x1a0>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	3307      	adds	r3, #7
 8008292:	f023 0307 	bic.w	r3, r3, #7
 8008296:	3308      	adds	r3, #8
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829c:	444b      	add	r3, r9
 800829e:	9309      	str	r3, [sp, #36]	; 0x24
 80082a0:	e76d      	b.n	800817e <_svfiprintf_r+0x4a>
 80082a2:	fb05 3202 	mla	r2, r5, r2, r3
 80082a6:	2001      	movs	r0, #1
 80082a8:	460f      	mov	r7, r1
 80082aa:	e7a6      	b.n	80081fa <_svfiprintf_r+0xc6>
 80082ac:	2300      	movs	r3, #0
 80082ae:	250a      	movs	r5, #10
 80082b0:	4619      	mov	r1, r3
 80082b2:	3701      	adds	r7, #1
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	4638      	mov	r0, r7
 80082b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082bc:	3a30      	subs	r2, #48	; 0x30
 80082be:	2a09      	cmp	r2, #9
 80082c0:	d903      	bls.n	80082ca <_svfiprintf_r+0x196>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c8      	beq.n	8008258 <_svfiprintf_r+0x124>
 80082c6:	9105      	str	r1, [sp, #20]
 80082c8:	e7c6      	b.n	8008258 <_svfiprintf_r+0x124>
 80082ca:	fb05 2101 	mla	r1, r5, r1, r2
 80082ce:	2301      	movs	r3, #1
 80082d0:	4607      	mov	r7, r0
 80082d2:	e7f0      	b.n	80082b6 <_svfiprintf_r+0x182>
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	4622      	mov	r2, r4
 80082da:	4b11      	ldr	r3, [pc, #68]	; (8008320 <_svfiprintf_r+0x1ec>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	4640      	mov	r0, r8
 80082e0:	f3af 8000 	nop.w
 80082e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80082e8:	4681      	mov	r9, r0
 80082ea:	d1d6      	bne.n	800829a <_svfiprintf_r+0x166>
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	065b      	lsls	r3, r3, #25
 80082f0:	f53f af35 	bmi.w	800815e <_svfiprintf_r+0x2a>
 80082f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f6:	b01d      	add	sp, #116	; 0x74
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	4622      	mov	r2, r4
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <_svfiprintf_r+0x1ec>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	4640      	mov	r0, r8
 8008308:	f000 f882 	bl	8008410 <_printf_i>
 800830c:	e7ea      	b.n	80082e4 <_svfiprintf_r+0x1b0>
 800830e:	bf00      	nop
 8008310:	0800895c 	.word	0x0800895c
 8008314:	08008962 	.word	0x08008962
 8008318:	08008966 	.word	0x08008966
 800831c:	00000000 	.word	0x00000000
 8008320:	08008081 	.word	0x08008081

08008324 <_printf_common>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	4691      	mov	r9, r2
 800832a:	461f      	mov	r7, r3
 800832c:	688a      	ldr	r2, [r1, #8]
 800832e:	690b      	ldr	r3, [r1, #16]
 8008330:	4606      	mov	r6, r0
 8008332:	4293      	cmp	r3, r2
 8008334:	bfb8      	it	lt
 8008336:	4613      	movlt	r3, r2
 8008338:	f8c9 3000 	str.w	r3, [r9]
 800833c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008340:	460c      	mov	r4, r1
 8008342:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008346:	b112      	cbz	r2, 800834e <_printf_common+0x2a>
 8008348:	3301      	adds	r3, #1
 800834a:	f8c9 3000 	str.w	r3, [r9]
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	0699      	lsls	r1, r3, #26
 8008352:	bf42      	ittt	mi
 8008354:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008358:	3302      	addmi	r3, #2
 800835a:	f8c9 3000 	strmi.w	r3, [r9]
 800835e:	6825      	ldr	r5, [r4, #0]
 8008360:	f015 0506 	ands.w	r5, r5, #6
 8008364:	d107      	bne.n	8008376 <_printf_common+0x52>
 8008366:	f104 0a19 	add.w	sl, r4, #25
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	f8d9 2000 	ldr.w	r2, [r9]
 8008370:	1a9b      	subs	r3, r3, r2
 8008372:	42ab      	cmp	r3, r5
 8008374:	dc29      	bgt.n	80083ca <_printf_common+0xa6>
 8008376:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	3300      	adds	r3, #0
 800837e:	bf18      	it	ne
 8008380:	2301      	movne	r3, #1
 8008382:	0692      	lsls	r2, r2, #26
 8008384:	d42e      	bmi.n	80083e4 <_printf_common+0xc0>
 8008386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838a:	4639      	mov	r1, r7
 800838c:	4630      	mov	r0, r6
 800838e:	47c0      	blx	r8
 8008390:	3001      	adds	r0, #1
 8008392:	d021      	beq.n	80083d8 <_printf_common+0xb4>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	68e5      	ldr	r5, [r4, #12]
 8008398:	f003 0306 	and.w	r3, r3, #6
 800839c:	2b04      	cmp	r3, #4
 800839e:	bf18      	it	ne
 80083a0:	2500      	movne	r5, #0
 80083a2:	f8d9 2000 	ldr.w	r2, [r9]
 80083a6:	f04f 0900 	mov.w	r9, #0
 80083aa:	bf08      	it	eq
 80083ac:	1aad      	subeq	r5, r5, r2
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	bf08      	it	eq
 80083b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b8:	4293      	cmp	r3, r2
 80083ba:	bfc4      	itt	gt
 80083bc:	1a9b      	subgt	r3, r3, r2
 80083be:	18ed      	addgt	r5, r5, r3
 80083c0:	341a      	adds	r4, #26
 80083c2:	454d      	cmp	r5, r9
 80083c4:	d11a      	bne.n	80083fc <_printf_common+0xd8>
 80083c6:	2000      	movs	r0, #0
 80083c8:	e008      	b.n	80083dc <_printf_common+0xb8>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4652      	mov	r2, sl
 80083ce:	4639      	mov	r1, r7
 80083d0:	4630      	mov	r0, r6
 80083d2:	47c0      	blx	r8
 80083d4:	3001      	adds	r0, #1
 80083d6:	d103      	bne.n	80083e0 <_printf_common+0xbc>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e0:	3501      	adds	r5, #1
 80083e2:	e7c2      	b.n	800836a <_printf_common+0x46>
 80083e4:	2030      	movs	r0, #48	; 0x30
 80083e6:	18e1      	adds	r1, r4, r3
 80083e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f2:	4422      	add	r2, r4
 80083f4:	3302      	adds	r3, #2
 80083f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083fa:	e7c4      	b.n	8008386 <_printf_common+0x62>
 80083fc:	2301      	movs	r3, #1
 80083fe:	4622      	mov	r2, r4
 8008400:	4639      	mov	r1, r7
 8008402:	4630      	mov	r0, r6
 8008404:	47c0      	blx	r8
 8008406:	3001      	adds	r0, #1
 8008408:	d0e6      	beq.n	80083d8 <_printf_common+0xb4>
 800840a:	f109 0901 	add.w	r9, r9, #1
 800840e:	e7d8      	b.n	80083c2 <_printf_common+0x9e>

08008410 <_printf_i>:
 8008410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008414:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008418:	460c      	mov	r4, r1
 800841a:	7e09      	ldrb	r1, [r1, #24]
 800841c:	b085      	sub	sp, #20
 800841e:	296e      	cmp	r1, #110	; 0x6e
 8008420:	4617      	mov	r7, r2
 8008422:	4606      	mov	r6, r0
 8008424:	4698      	mov	r8, r3
 8008426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008428:	f000 80b3 	beq.w	8008592 <_printf_i+0x182>
 800842c:	d822      	bhi.n	8008474 <_printf_i+0x64>
 800842e:	2963      	cmp	r1, #99	; 0x63
 8008430:	d036      	beq.n	80084a0 <_printf_i+0x90>
 8008432:	d80a      	bhi.n	800844a <_printf_i+0x3a>
 8008434:	2900      	cmp	r1, #0
 8008436:	f000 80b9 	beq.w	80085ac <_printf_i+0x19c>
 800843a:	2958      	cmp	r1, #88	; 0x58
 800843c:	f000 8083 	beq.w	8008546 <_printf_i+0x136>
 8008440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008444:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008448:	e032      	b.n	80084b0 <_printf_i+0xa0>
 800844a:	2964      	cmp	r1, #100	; 0x64
 800844c:	d001      	beq.n	8008452 <_printf_i+0x42>
 800844e:	2969      	cmp	r1, #105	; 0x69
 8008450:	d1f6      	bne.n	8008440 <_printf_i+0x30>
 8008452:	6820      	ldr	r0, [r4, #0]
 8008454:	6813      	ldr	r3, [r2, #0]
 8008456:	0605      	lsls	r5, r0, #24
 8008458:	f103 0104 	add.w	r1, r3, #4
 800845c:	d52a      	bpl.n	80084b4 <_printf_i+0xa4>
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6011      	str	r1, [r2, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	da03      	bge.n	800846e <_printf_i+0x5e>
 8008466:	222d      	movs	r2, #45	; 0x2d
 8008468:	425b      	negs	r3, r3
 800846a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800846e:	486f      	ldr	r0, [pc, #444]	; (800862c <_printf_i+0x21c>)
 8008470:	220a      	movs	r2, #10
 8008472:	e039      	b.n	80084e8 <_printf_i+0xd8>
 8008474:	2973      	cmp	r1, #115	; 0x73
 8008476:	f000 809d 	beq.w	80085b4 <_printf_i+0x1a4>
 800847a:	d808      	bhi.n	800848e <_printf_i+0x7e>
 800847c:	296f      	cmp	r1, #111	; 0x6f
 800847e:	d020      	beq.n	80084c2 <_printf_i+0xb2>
 8008480:	2970      	cmp	r1, #112	; 0x70
 8008482:	d1dd      	bne.n	8008440 <_printf_i+0x30>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	f043 0320 	orr.w	r3, r3, #32
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	e003      	b.n	8008496 <_printf_i+0x86>
 800848e:	2975      	cmp	r1, #117	; 0x75
 8008490:	d017      	beq.n	80084c2 <_printf_i+0xb2>
 8008492:	2978      	cmp	r1, #120	; 0x78
 8008494:	d1d4      	bne.n	8008440 <_printf_i+0x30>
 8008496:	2378      	movs	r3, #120	; 0x78
 8008498:	4865      	ldr	r0, [pc, #404]	; (8008630 <_printf_i+0x220>)
 800849a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800849e:	e055      	b.n	800854c <_printf_i+0x13c>
 80084a0:	6813      	ldr	r3, [r2, #0]
 80084a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084a6:	1d19      	adds	r1, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6011      	str	r1, [r2, #0]
 80084ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b0:	2301      	movs	r3, #1
 80084b2:	e08c      	b.n	80085ce <_printf_i+0x1be>
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ba:	6011      	str	r1, [r2, #0]
 80084bc:	bf18      	it	ne
 80084be:	b21b      	sxthne	r3, r3
 80084c0:	e7cf      	b.n	8008462 <_printf_i+0x52>
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	6825      	ldr	r5, [r4, #0]
 80084c6:	1d18      	adds	r0, r3, #4
 80084c8:	6010      	str	r0, [r2, #0]
 80084ca:	0628      	lsls	r0, r5, #24
 80084cc:	d501      	bpl.n	80084d2 <_printf_i+0xc2>
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	e002      	b.n	80084d8 <_printf_i+0xc8>
 80084d2:	0668      	lsls	r0, r5, #25
 80084d4:	d5fb      	bpl.n	80084ce <_printf_i+0xbe>
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	296f      	cmp	r1, #111	; 0x6f
 80084da:	bf14      	ite	ne
 80084dc:	220a      	movne	r2, #10
 80084de:	2208      	moveq	r2, #8
 80084e0:	4852      	ldr	r0, [pc, #328]	; (800862c <_printf_i+0x21c>)
 80084e2:	2100      	movs	r1, #0
 80084e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084e8:	6865      	ldr	r5, [r4, #4]
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	60a5      	str	r5, [r4, #8]
 80084ee:	f2c0 8095 	blt.w	800861c <_printf_i+0x20c>
 80084f2:	6821      	ldr	r1, [r4, #0]
 80084f4:	f021 0104 	bic.w	r1, r1, #4
 80084f8:	6021      	str	r1, [r4, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d13d      	bne.n	800857a <_printf_i+0x16a>
 80084fe:	2d00      	cmp	r5, #0
 8008500:	f040 808e 	bne.w	8008620 <_printf_i+0x210>
 8008504:	4665      	mov	r5, ip
 8008506:	2a08      	cmp	r2, #8
 8008508:	d10b      	bne.n	8008522 <_printf_i+0x112>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	07db      	lsls	r3, r3, #31
 800850e:	d508      	bpl.n	8008522 <_printf_i+0x112>
 8008510:	6923      	ldr	r3, [r4, #16]
 8008512:	6862      	ldr	r2, [r4, #4]
 8008514:	429a      	cmp	r2, r3
 8008516:	bfde      	ittt	le
 8008518:	2330      	movle	r3, #48	; 0x30
 800851a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800851e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008522:	ebac 0305 	sub.w	r3, ip, r5
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	f8cd 8000 	str.w	r8, [sp]
 800852c:	463b      	mov	r3, r7
 800852e:	aa03      	add	r2, sp, #12
 8008530:	4621      	mov	r1, r4
 8008532:	4630      	mov	r0, r6
 8008534:	f7ff fef6 	bl	8008324 <_printf_common>
 8008538:	3001      	adds	r0, #1
 800853a:	d14d      	bne.n	80085d8 <_printf_i+0x1c8>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008540:	b005      	add	sp, #20
 8008542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008546:	4839      	ldr	r0, [pc, #228]	; (800862c <_printf_i+0x21c>)
 8008548:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800854c:	6813      	ldr	r3, [r2, #0]
 800854e:	6821      	ldr	r1, [r4, #0]
 8008550:	1d1d      	adds	r5, r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6015      	str	r5, [r2, #0]
 8008556:	060a      	lsls	r2, r1, #24
 8008558:	d50b      	bpl.n	8008572 <_printf_i+0x162>
 800855a:	07ca      	lsls	r2, r1, #31
 800855c:	bf44      	itt	mi
 800855e:	f041 0120 	orrmi.w	r1, r1, #32
 8008562:	6021      	strmi	r1, [r4, #0]
 8008564:	b91b      	cbnz	r3, 800856e <_printf_i+0x15e>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	f022 0220 	bic.w	r2, r2, #32
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	2210      	movs	r2, #16
 8008570:	e7b7      	b.n	80084e2 <_printf_i+0xd2>
 8008572:	064d      	lsls	r5, r1, #25
 8008574:	bf48      	it	mi
 8008576:	b29b      	uxthmi	r3, r3
 8008578:	e7ef      	b.n	800855a <_printf_i+0x14a>
 800857a:	4665      	mov	r5, ip
 800857c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008580:	fb02 3311 	mls	r3, r2, r1, r3
 8008584:	5cc3      	ldrb	r3, [r0, r3]
 8008586:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800858a:	460b      	mov	r3, r1
 800858c:	2900      	cmp	r1, #0
 800858e:	d1f5      	bne.n	800857c <_printf_i+0x16c>
 8008590:	e7b9      	b.n	8008506 <_printf_i+0xf6>
 8008592:	6813      	ldr	r3, [r2, #0]
 8008594:	6825      	ldr	r5, [r4, #0]
 8008596:	1d18      	adds	r0, r3, #4
 8008598:	6961      	ldr	r1, [r4, #20]
 800859a:	6010      	str	r0, [r2, #0]
 800859c:	0628      	lsls	r0, r5, #24
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	d501      	bpl.n	80085a6 <_printf_i+0x196>
 80085a2:	6019      	str	r1, [r3, #0]
 80085a4:	e002      	b.n	80085ac <_printf_i+0x19c>
 80085a6:	066a      	lsls	r2, r5, #25
 80085a8:	d5fb      	bpl.n	80085a2 <_printf_i+0x192>
 80085aa:	8019      	strh	r1, [r3, #0]
 80085ac:	2300      	movs	r3, #0
 80085ae:	4665      	mov	r5, ip
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	e7b9      	b.n	8008528 <_printf_i+0x118>
 80085b4:	6813      	ldr	r3, [r2, #0]
 80085b6:	1d19      	adds	r1, r3, #4
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	681d      	ldr	r5, [r3, #0]
 80085bc:	6862      	ldr	r2, [r4, #4]
 80085be:	2100      	movs	r1, #0
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 f837 	bl	8008634 <memchr>
 80085c6:	b108      	cbz	r0, 80085cc <_printf_i+0x1bc>
 80085c8:	1b40      	subs	r0, r0, r5
 80085ca:	6060      	str	r0, [r4, #4]
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	6123      	str	r3, [r4, #16]
 80085d0:	2300      	movs	r3, #0
 80085d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d6:	e7a7      	b.n	8008528 <_printf_i+0x118>
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	462a      	mov	r2, r5
 80085dc:	4639      	mov	r1, r7
 80085de:	4630      	mov	r0, r6
 80085e0:	47c0      	blx	r8
 80085e2:	3001      	adds	r0, #1
 80085e4:	d0aa      	beq.n	800853c <_printf_i+0x12c>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	079b      	lsls	r3, r3, #30
 80085ea:	d413      	bmi.n	8008614 <_printf_i+0x204>
 80085ec:	68e0      	ldr	r0, [r4, #12]
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	4298      	cmp	r0, r3
 80085f2:	bfb8      	it	lt
 80085f4:	4618      	movlt	r0, r3
 80085f6:	e7a3      	b.n	8008540 <_printf_i+0x130>
 80085f8:	2301      	movs	r3, #1
 80085fa:	464a      	mov	r2, r9
 80085fc:	4639      	mov	r1, r7
 80085fe:	4630      	mov	r0, r6
 8008600:	47c0      	blx	r8
 8008602:	3001      	adds	r0, #1
 8008604:	d09a      	beq.n	800853c <_printf_i+0x12c>
 8008606:	3501      	adds	r5, #1
 8008608:	68e3      	ldr	r3, [r4, #12]
 800860a:	9a03      	ldr	r2, [sp, #12]
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	42ab      	cmp	r3, r5
 8008610:	dcf2      	bgt.n	80085f8 <_printf_i+0x1e8>
 8008612:	e7eb      	b.n	80085ec <_printf_i+0x1dc>
 8008614:	2500      	movs	r5, #0
 8008616:	f104 0919 	add.w	r9, r4, #25
 800861a:	e7f5      	b.n	8008608 <_printf_i+0x1f8>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1ac      	bne.n	800857a <_printf_i+0x16a>
 8008620:	7803      	ldrb	r3, [r0, #0]
 8008622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800862a:	e76c      	b.n	8008506 <_printf_i+0xf6>
 800862c:	0800896d 	.word	0x0800896d
 8008630:	0800897e 	.word	0x0800897e

08008634 <memchr>:
 8008634:	b510      	push	{r4, lr}
 8008636:	b2c9      	uxtb	r1, r1
 8008638:	4402      	add	r2, r0
 800863a:	4290      	cmp	r0, r2
 800863c:	4603      	mov	r3, r0
 800863e:	d101      	bne.n	8008644 <memchr+0x10>
 8008640:	2300      	movs	r3, #0
 8008642:	e003      	b.n	800864c <memchr+0x18>
 8008644:	781c      	ldrb	r4, [r3, #0]
 8008646:	3001      	adds	r0, #1
 8008648:	428c      	cmp	r4, r1
 800864a:	d1f6      	bne.n	800863a <memchr+0x6>
 800864c:	4618      	mov	r0, r3
 800864e:	bd10      	pop	{r4, pc}

08008650 <memcpy>:
 8008650:	b510      	push	{r4, lr}
 8008652:	1e43      	subs	r3, r0, #1
 8008654:	440a      	add	r2, r1
 8008656:	4291      	cmp	r1, r2
 8008658:	d100      	bne.n	800865c <memcpy+0xc>
 800865a:	bd10      	pop	{r4, pc}
 800865c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008664:	e7f7      	b.n	8008656 <memcpy+0x6>

08008666 <memmove>:
 8008666:	4288      	cmp	r0, r1
 8008668:	b510      	push	{r4, lr}
 800866a:	eb01 0302 	add.w	r3, r1, r2
 800866e:	d807      	bhi.n	8008680 <memmove+0x1a>
 8008670:	1e42      	subs	r2, r0, #1
 8008672:	4299      	cmp	r1, r3
 8008674:	d00a      	beq.n	800868c <memmove+0x26>
 8008676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800867a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800867e:	e7f8      	b.n	8008672 <memmove+0xc>
 8008680:	4283      	cmp	r3, r0
 8008682:	d9f5      	bls.n	8008670 <memmove+0xa>
 8008684:	1881      	adds	r1, r0, r2
 8008686:	1ad2      	subs	r2, r2, r3
 8008688:	42d3      	cmn	r3, r2
 800868a:	d100      	bne.n	800868e <memmove+0x28>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008692:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008696:	e7f7      	b.n	8008688 <memmove+0x22>

08008698 <_free_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4605      	mov	r5, r0
 800869c:	2900      	cmp	r1, #0
 800869e:	d043      	beq.n	8008728 <_free_r+0x90>
 80086a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a4:	1f0c      	subs	r4, r1, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfb8      	it	lt
 80086aa:	18e4      	addlt	r4, r4, r3
 80086ac:	f000 f8d0 	bl	8008850 <__malloc_lock>
 80086b0:	4a1e      	ldr	r2, [pc, #120]	; (800872c <_free_r+0x94>)
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	4610      	mov	r0, r2
 80086b6:	b933      	cbnz	r3, 80086c6 <_free_r+0x2e>
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	6014      	str	r4, [r2, #0]
 80086bc:	4628      	mov	r0, r5
 80086be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086c2:	f000 b8c6 	b.w	8008852 <__malloc_unlock>
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	d90b      	bls.n	80086e2 <_free_r+0x4a>
 80086ca:	6821      	ldr	r1, [r4, #0]
 80086cc:	1862      	adds	r2, r4, r1
 80086ce:	4293      	cmp	r3, r2
 80086d0:	bf01      	itttt	eq
 80086d2:	681a      	ldreq	r2, [r3, #0]
 80086d4:	685b      	ldreq	r3, [r3, #4]
 80086d6:	1852      	addeq	r2, r2, r1
 80086d8:	6022      	streq	r2, [r4, #0]
 80086da:	6063      	str	r3, [r4, #4]
 80086dc:	6004      	str	r4, [r0, #0]
 80086de:	e7ed      	b.n	80086bc <_free_r+0x24>
 80086e0:	4613      	mov	r3, r2
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	b10a      	cbz	r2, 80086ea <_free_r+0x52>
 80086e6:	42a2      	cmp	r2, r4
 80086e8:	d9fa      	bls.n	80086e0 <_free_r+0x48>
 80086ea:	6819      	ldr	r1, [r3, #0]
 80086ec:	1858      	adds	r0, r3, r1
 80086ee:	42a0      	cmp	r0, r4
 80086f0:	d10b      	bne.n	800870a <_free_r+0x72>
 80086f2:	6820      	ldr	r0, [r4, #0]
 80086f4:	4401      	add	r1, r0
 80086f6:	1858      	adds	r0, r3, r1
 80086f8:	4282      	cmp	r2, r0
 80086fa:	6019      	str	r1, [r3, #0]
 80086fc:	d1de      	bne.n	80086bc <_free_r+0x24>
 80086fe:	6810      	ldr	r0, [r2, #0]
 8008700:	6852      	ldr	r2, [r2, #4]
 8008702:	4401      	add	r1, r0
 8008704:	6019      	str	r1, [r3, #0]
 8008706:	605a      	str	r2, [r3, #4]
 8008708:	e7d8      	b.n	80086bc <_free_r+0x24>
 800870a:	d902      	bls.n	8008712 <_free_r+0x7a>
 800870c:	230c      	movs	r3, #12
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	e7d4      	b.n	80086bc <_free_r+0x24>
 8008712:	6820      	ldr	r0, [r4, #0]
 8008714:	1821      	adds	r1, r4, r0
 8008716:	428a      	cmp	r2, r1
 8008718:	bf01      	itttt	eq
 800871a:	6811      	ldreq	r1, [r2, #0]
 800871c:	6852      	ldreq	r2, [r2, #4]
 800871e:	1809      	addeq	r1, r1, r0
 8008720:	6021      	streq	r1, [r4, #0]
 8008722:	6062      	str	r2, [r4, #4]
 8008724:	605c      	str	r4, [r3, #4]
 8008726:	e7c9      	b.n	80086bc <_free_r+0x24>
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	20000440 	.word	0x20000440

08008730 <_malloc_r>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	1ccd      	adds	r5, r1, #3
 8008734:	f025 0503 	bic.w	r5, r5, #3
 8008738:	3508      	adds	r5, #8
 800873a:	2d0c      	cmp	r5, #12
 800873c:	bf38      	it	cc
 800873e:	250c      	movcc	r5, #12
 8008740:	2d00      	cmp	r5, #0
 8008742:	4606      	mov	r6, r0
 8008744:	db01      	blt.n	800874a <_malloc_r+0x1a>
 8008746:	42a9      	cmp	r1, r5
 8008748:	d903      	bls.n	8008752 <_malloc_r+0x22>
 800874a:	230c      	movs	r3, #12
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	2000      	movs	r0, #0
 8008750:	bd70      	pop	{r4, r5, r6, pc}
 8008752:	f000 f87d 	bl	8008850 <__malloc_lock>
 8008756:	4a21      	ldr	r2, [pc, #132]	; (80087dc <_malloc_r+0xac>)
 8008758:	6814      	ldr	r4, [r2, #0]
 800875a:	4621      	mov	r1, r4
 800875c:	b991      	cbnz	r1, 8008784 <_malloc_r+0x54>
 800875e:	4c20      	ldr	r4, [pc, #128]	; (80087e0 <_malloc_r+0xb0>)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	b91b      	cbnz	r3, 800876c <_malloc_r+0x3c>
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f863 	bl	8008830 <_sbrk_r>
 800876a:	6020      	str	r0, [r4, #0]
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f85e 	bl	8008830 <_sbrk_r>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d124      	bne.n	80087c2 <_malloc_r+0x92>
 8008778:	230c      	movs	r3, #12
 800877a:	4630      	mov	r0, r6
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	f000 f868 	bl	8008852 <__malloc_unlock>
 8008782:	e7e4      	b.n	800874e <_malloc_r+0x1e>
 8008784:	680b      	ldr	r3, [r1, #0]
 8008786:	1b5b      	subs	r3, r3, r5
 8008788:	d418      	bmi.n	80087bc <_malloc_r+0x8c>
 800878a:	2b0b      	cmp	r3, #11
 800878c:	d90f      	bls.n	80087ae <_malloc_r+0x7e>
 800878e:	600b      	str	r3, [r1, #0]
 8008790:	18cc      	adds	r4, r1, r3
 8008792:	50cd      	str	r5, [r1, r3]
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f85c 	bl	8008852 <__malloc_unlock>
 800879a:	f104 000b 	add.w	r0, r4, #11
 800879e:	1d23      	adds	r3, r4, #4
 80087a0:	f020 0007 	bic.w	r0, r0, #7
 80087a4:	1ac3      	subs	r3, r0, r3
 80087a6:	d0d3      	beq.n	8008750 <_malloc_r+0x20>
 80087a8:	425a      	negs	r2, r3
 80087aa:	50e2      	str	r2, [r4, r3]
 80087ac:	e7d0      	b.n	8008750 <_malloc_r+0x20>
 80087ae:	684b      	ldr	r3, [r1, #4]
 80087b0:	428c      	cmp	r4, r1
 80087b2:	bf16      	itet	ne
 80087b4:	6063      	strne	r3, [r4, #4]
 80087b6:	6013      	streq	r3, [r2, #0]
 80087b8:	460c      	movne	r4, r1
 80087ba:	e7eb      	b.n	8008794 <_malloc_r+0x64>
 80087bc:	460c      	mov	r4, r1
 80087be:	6849      	ldr	r1, [r1, #4]
 80087c0:	e7cc      	b.n	800875c <_malloc_r+0x2c>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d005      	beq.n	80087d8 <_malloc_r+0xa8>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 f82e 	bl	8008830 <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d0cf      	beq.n	8008778 <_malloc_r+0x48>
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	e7db      	b.n	8008794 <_malloc_r+0x64>
 80087dc:	20000440 	.word	0x20000440
 80087e0:	20000444 	.word	0x20000444

080087e4 <_realloc_r>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	4607      	mov	r7, r0
 80087e8:	4614      	mov	r4, r2
 80087ea:	460e      	mov	r6, r1
 80087ec:	b921      	cbnz	r1, 80087f8 <_realloc_r+0x14>
 80087ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087f2:	4611      	mov	r1, r2
 80087f4:	f7ff bf9c 	b.w	8008730 <_malloc_r>
 80087f8:	b922      	cbnz	r2, 8008804 <_realloc_r+0x20>
 80087fa:	f7ff ff4d 	bl	8008698 <_free_r>
 80087fe:	4625      	mov	r5, r4
 8008800:	4628      	mov	r0, r5
 8008802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008804:	f000 f826 	bl	8008854 <_malloc_usable_size_r>
 8008808:	42a0      	cmp	r0, r4
 800880a:	d20f      	bcs.n	800882c <_realloc_r+0x48>
 800880c:	4621      	mov	r1, r4
 800880e:	4638      	mov	r0, r7
 8008810:	f7ff ff8e 	bl	8008730 <_malloc_r>
 8008814:	4605      	mov	r5, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	d0f2      	beq.n	8008800 <_realloc_r+0x1c>
 800881a:	4631      	mov	r1, r6
 800881c:	4622      	mov	r2, r4
 800881e:	f7ff ff17 	bl	8008650 <memcpy>
 8008822:	4631      	mov	r1, r6
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff ff37 	bl	8008698 <_free_r>
 800882a:	e7e9      	b.n	8008800 <_realloc_r+0x1c>
 800882c:	4635      	mov	r5, r6
 800882e:	e7e7      	b.n	8008800 <_realloc_r+0x1c>

08008830 <_sbrk_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	2300      	movs	r3, #0
 8008834:	4c05      	ldr	r4, [pc, #20]	; (800884c <_sbrk_r+0x1c>)
 8008836:	4605      	mov	r5, r0
 8008838:	4608      	mov	r0, r1
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	f7f8 fb5a 	bl	8000ef4 <_sbrk>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_sbrk_r+0x1a>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	b103      	cbz	r3, 800884a <_sbrk_r+0x1a>
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	200014ac 	.word	0x200014ac

08008850 <__malloc_lock>:
 8008850:	4770      	bx	lr

08008852 <__malloc_unlock>:
 8008852:	4770      	bx	lr

08008854 <_malloc_usable_size_r>:
 8008854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008858:	1f18      	subs	r0, r3, #4
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfbc      	itt	lt
 800885e:	580b      	ldrlt	r3, [r1, r0]
 8008860:	18c0      	addlt	r0, r0, r3
 8008862:	4770      	bx	lr

08008864 <_init>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr

08008870 <_fini>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr
